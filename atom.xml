<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-20T09:32:46.210Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端组件化框架Vue学习</title>
    <link href="http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6Vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6Vue%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-20T09:32:46.000Z</published>
    <updated>2021-01-20T09:32:46.210Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端三大组件之JavaScript学习</title>
    <link href="http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BJavaScript%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BJavaScript%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-20T09:32:15.000Z</published>
    <updated>2021-01-20T09:32:15.220Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端三大组件之Html5+Css3学习</title>
    <link href="http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BHtml5-Css3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BHtml5-Css3%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-20T09:31:48.000Z</published>
    <updated>2021-01-20T09:31:49.007Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Oauth2开发标准学习</title>
    <link href="http://example.com/2021/01/11/Oauth2%E5%BC%80%E5%8F%91%E6%A0%87%E5%87%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/11/Oauth2%E5%BC%80%E5%8F%91%E6%A0%87%E5%87%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-11T09:01:04.000Z</published>
    <updated>2021-01-11T11:43:14.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oauth2-解决方案"><a href="#Oauth2-解决方案" class="headerlink" title="Oauth2 解决方案"></a>Oauth2 解决方案</h1><p>之所以说 Oauth2 是一种解决方案，一个开放标准，而不是一种协议，是因为他是解决第三方访问服务时，不共享其他数据，只拿到应该拿的信息。<br>解决办法是：令牌机制:生成 token 字符串，根据 token 判断是否能访问某些服务，是否具有某些权限。<br>运行流程图:<br><img src="/Users/shiguangjiaowozhenxita/Documents/Oauth2.png" alt="Oauth2"><br>上图涉及四个主体和六个过程:<br>过程:<br>（A）用户打开客户端以后，客户端要求用户给予授权。<br>（B）用户同意给予客户端授权。<br>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。<br>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。<br>（E）客户端使用令牌，向资源服务器申请获取资源。<br>（F）资源服务器确认令牌无误，同意向客户端开放资源。<br>主体:<br>1.客户端(浏览器)<br>2.资源拥有者(用户自己)<br>3.授权服务器(认证服务器)<br>4.资源服务器</p><h2 id="授权服务配置"><a href="#授权服务配置" class="headerlink" title="授权服务配置"></a>授权服务配置</h2><p>向授权服务器进行认证，并返回 token</p><ol><li><p><strong>EnableAuthorizationServer</strong> </p><p>在Confifig包下创建AuthorizationServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123; </span><br><span class="line">  <span class="comment">//略... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以用 @EnableAuthorizationServer 注解并继承AuthorizationServerConfifigurerAdapter来配置OAuth2.0 授权服务器。 </p></blockquote></li></ol><p>AuthorizationServerConfifigurerAdapter要求配置以下几个类，这几个类是由Spring创建的独立的配置对象，它们 会被Spring传入AuthorizationServerConfifigurer中进行配置。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">AuthorizationServerConfigurer</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationServerConfigurerAdapter</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ClientDetailsServiceConfifigurer</strong>：用来配置客户端详情服务（ClientDetailsService），客户端详情信息在 这里进行初始化，你能够把客户端详情信息写死在这里或者是通过数据库来存储调取详情信息。</li><li><strong>AuthorizationServerEndpointsConfifigurer</strong>：用来配置令牌（token）的访问端点和令牌服务(token services)。</li><li><strong>AuthorizationServerSecurityConfifigurer</strong>：用来配置令牌端点的安全约束。</li></ul><h3 id="1-配置客户端详细信息"><a href="#1-配置客户端详细信息" class="headerlink" title="1.配置客户端详细信息"></a>1.配置客户端详细信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">  <span class="comment">// clients.withClientDetails(clientDetailsService); </span></span><br><span class="line">  clients.inMemory()<span class="comment">// 使用in‐memory存储 </span></span><br><span class="line">    .withClient(<span class="string">&quot;c1&quot;</span>)<span class="comment">// client_id </span></span><br><span class="line">    .secret(<span class="keyword">new</span> BCryptPasswordEncoder()</span><br><span class="line">            .encode(<span class="string">&quot;secret&quot;</span>)) </span><br><span class="line">    .resourceIds(<span class="string">&quot;res1&quot;</span>) </span><br><span class="line">    .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;password&quot;</span>,<span class="string">&quot;client_credentials&quot;</span>,<span class="string">&quot;implicit&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>)<span class="comment">// 该client允许的授权类型 authorization_code,password,refresh_token,implicit,client_credentials </span></span><br><span class="line">    .scopes(<span class="string">&quot;all&quot;</span>)<span class="comment">// 允许的授权范围 </span></span><br><span class="line">    .autoApprove(<span class="keyword">false</span>) <span class="comment">//加上验证回调地址 </span></span><br><span class="line">    .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-管理令牌"><a href="#2-管理令牌" class="headerlink" title="2.管理令牌"></a>2.管理令牌</h3><p>AuthorizationServerTokenServices 接口定义了一些操作使得你可以对令牌进行一些必要的管理，令牌可以被用来 加载身份信息，里面包含了这个令牌的相关权限。除了持久化令牌是委托一个 TokenStore 接口来实现以外，这个类几乎帮你做了 所有的事情。</p><p>1).定义tokenconfig</p><p>在confifig包下定义TokenConfifig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenConfig</span> </span>&#123; </span><br><span class="line">  <span class="meta">@Bean</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> InMemoryTokenStore(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有三种实现：</p><ul><li>InMemoryTokenStore：被默认采用的，内存中持久化</li><li>JdbcTokenStore：基于JDBC的实现，</li><li>JwtTokenStore：按照jwt生成token</li></ul></blockquote><p>2).定义AuthorizationServerTokenServices </p><p>在AuthorizationServer中定义AuthorizationServerTokenServices</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> TokenStore tokenStore; </span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> ClientDetailsService clientDetailsService; </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationServerTokenServices <span class="title">tokenService</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  DefaultTokenServices service=<span class="keyword">new</span> DefaultTokenServices(); </span><br><span class="line">  service.setClientDetailsService(clientDetailsService); </span><br><span class="line">  service.setSupportRefreshToken(<span class="keyword">true</span>); </span><br><span class="line">  service.setTokenStore(tokenStore); </span><br><span class="line">  service.setAccessTokenValiditySeconds(<span class="number">7200</span>); <span class="comment">// 令牌默认有效期2小时 </span></span><br><span class="line">  service.setRefreshTokenValiditySeconds(<span class="number">259200</span>); <span class="comment">// 刷新令牌默认有效期3天 return service; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-令牌访问端点"><a href="#3-令牌访问端点" class="headerlink" title="3.令牌访问端点"></a>3.令牌访问端点</h3><p>AuthorizationServerEndpointsConfifigurer 这个对象的实例可以完成令牌服务以及令牌endpoint配置。</p><p><strong>配置授权类型：</strong></p><ul><li>authenticationManager</li><li>userDetailsService</li><li>authorizationCodeServices</li><li>implicitGrantService</li><li>tokenGranter</li></ul><blockquote><p>后面两个比较少用，第一个是密码授权时的认证管理器，第二个是查询数据库用到的，第三个是授权码模式</p></blockquote><p><strong>配置授权端点URL</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> AuthorizationCodeServices authorizationCodeServices; </span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> AuthenticationManager authenticationManager; </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123; </span><br><span class="line">  endpoints .authenticationManager(authenticationManager) </span><br><span class="line">    .authorizationCodeServices(authorizationCodeServices) </span><br><span class="line">    .tokenServices(tokenService()) </span><br><span class="line">    .allowedTokenEndpointRequestMethods(HttpMethod.POST); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationCodeServices <span class="title">authorizationCodeServices</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="comment">//设置授权码模式的授权码如何 存取，暂时采用内存方式 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> InMemoryAuthorizationCodeServices(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-令牌端点的安全约束"><a href="#4-令牌端点的安全约束" class="headerlink" title="4.令牌端点的安全约束"></a>4.令牌端点的安全约束</h3><p><strong>AuthorizationServerSecurityConfifigurer</strong>：用来配置令牌端点(Token Endpoint)的安全约束，在 </p><p>AuthorizationServer中配置如下. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span></span>&#123; </span><br><span class="line">  security .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">    .checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">    .allowFormAuthenticationForClients(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>授权服务总结：</strong>第一步要完成认证，就要知道从哪个客户端传来的请求并认证，因此要进行客户端配置；第二步生成令牌，要配置token相关url，token存在哪里等；第三步对token的端点进行安全约束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Oauth2-解决方案&quot;&gt;&lt;a href=&quot;#Oauth2-解决方案&quot; class=&quot;headerlink&quot; title=&quot;Oauth2 解决方案&quot;&gt;&lt;/a&gt;Oauth2 解决方案&lt;/h1&gt;&lt;p&gt;之所以说 Oauth2 是一种解决方案，一个开放标准，而不是一种协议</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Security框架学习</title>
    <link href="http://example.com/2021/01/07/Spring-Security%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/07/Spring-Security%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-07T06:38:11.000Z</published>
    <updated>2021-01-10T03:06:41.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security框架学习"><a href="#Spring-Security框架学习" class="headerlink" title="Spring Security框架学习"></a>Spring Security框架学习</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>Spring Security主要两大核心功能：<strong>“认证”</strong>和<strong>“授权”</strong></p><ul><li>认证：是指用户是否登录</li></ul><ul><li>授权：是判断用户是否有权限进行某操作</li></ul><p>Spring Security本质是<strong>过滤链</strong>，过滤器有很多，主要的三个：方法级，错误，登录</p><p>FilterSecurityInterceptor：方法级权限过滤器，位于过滤链最底部</p><p>ExceptionTranslationFilter：是个异常过滤器，用来处理在认证授权过程中抛出的异常</p><p>UsernamePasswordAuthenticationFilter ：对/login 的 POST 请求做拦截，校验表单中用户名，密码。</p><p>过滤器加载过程</p><p>两个重要接口：</p><p><strong>UserDetailService</strong> 查询数据库用户密码的过程 </p><p><strong>PasswodeEncoder</strong> 密码加密</p><h2 id="二、web权限方案"><a href="#二、web权限方案" class="headerlink" title="二、web权限方案"></a>二、web权限方案</h2><h3 id="1-设置登录用户名密码"><a href="#1-设置登录用户名密码" class="headerlink" title="1.设置登录用户名密码"></a>1.设置登录用户名密码</h3><p>1.通过配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9111</span></span><br><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">maizhudeaimu</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>2.通过配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        BCryptPasswordEncoder bCryptPasswordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        String encode = bCryptPasswordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;aimu&quot;</span>).password(encode).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">password</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：There is no PasswordEncoder mapped for the id “null”，原因是没有把BCryptPasswordEncoder的bean注入容器与之绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function">PasswordEncoder <span class="title">password</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.自定义编写实体类</p><blockquote><p>上述两种方式不常用，我们实现业务时主要通过数据库查询用户名密码，所以第三种比较重要。</p></blockquote><p>​    1.创建配置类，决定使用哪一个userDetailService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">password</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2.编写实现类，返回User对象，里面含有username和password</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span><span class="comment">//这里写上名字，配置类注入才不会报红错误</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//调用UserMapper方法查询数据库</span></span><br><span class="line">        QueryWrapper&lt;cn.aimu.securitydemo1.entity.User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        cn.aimu.securitydemo1.entity.User user = userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户名不存在！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义登录页面"><a href="#2-自定义登录页面" class="headerlink" title="2.自定义登录页面"></a>2.自定义登录页面</h3><blockquote><p>定义一个login.html页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>要实现自定义登录页面需要重写另一个configure方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">password</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin()<span class="comment">//自定义自己编写的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">//登录页面设置</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录页面访问路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()<span class="comment">//登录成功跳转页面</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()<span class="comment">//设置哪些路径可以直接访问，不需要认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().csrf().disable();<span class="comment">//关闭csrf防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-基于角色或权限进行访问控制"><a href="#3-基于角色或权限进行访问控制" class="headerlink" title="3.基于角色或权限进行访问控制"></a>3.基于角色或权限进行访问控制</h3><ol><li><p><strong>hasAuthority</strong> 方法</p><p>具有某一个权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置类设置访问路径具有的权限</span></span><br><span class="line">antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAuthority(<span class="string">&quot;admins&quot;</span>)<span class="comment">//当前用户登录，只有具有admins权限才能访问这个路径</span></span><br><span class="line"><span class="comment">//2.在UserDetailService中设置User对象权限</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br></pre></td></tr></table></figure><blockquote><p>报错There was an unexpected error (type=Forbidden, status=403).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改成一样的权限就可以了</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br></pre></td></tr></table></figure></blockquote></li></ol><ol start="2"><li><p><strong>hasAnyAuthority</strong> 方法</p><p>具有多个权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置类设置访问路径具有的权限</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins,managers&quot;</span>)<span class="comment">//多个权限都可以访问时</span></span><br><span class="line"><span class="comment">//2.在UserDetailService中设置User对象权限</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils</span><br><span class="line">  .commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);<span class="comment">//有其中一个权限就能访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p><strong>hasRole</strong> 方法</p><p>具有某一单一角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.配置类设置访问路径具有的角色</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)<span class="comment">//经过源码后变成ROLE_sale</span></span><br><span class="line"><span class="comment">//2.在UserDetailService中设置User对象角色</span></span><br><span class="line">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ROLE_sale&quot;</span>);<span class="comment">//加上前缀</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是跟Role有关的设置名字时不能以ROLE_开头，源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(role, <span class="string">&quot;role cannot be null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (role.startsWith(<span class="string">&quot;ROLE_&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;role should not start with &#x27;ROLE_&#x27; since it is automatically inserted. Got &#x27;&quot;</span> + role + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hasRole(&#x27;ROLE_&quot;</span> + role + <span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>传进去的role值被改为ROLE_role值所有在service设置角色时要加上前缀</p></blockquote></li><li><p><strong>hasAnyRole</strong> 方法</p><p>具有多个角色中任意一种，配置方式和上面差不多，不在赘述。</p></li></ol><h3 id="4-自定义403页面"><a href="#4-自定义403页面" class="headerlink" title="4.自定义403页面"></a>4.自定义403页面</h3><p>1.配置类–直接在confige方法写上这样一行代码，表示设置403错误页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.再写一个html页面。。</p><p>3.然后测试</p><h3 id="5-注解使用"><a href="#5-注解使用" class="headerlink" title="5.注解使用"></a>5.注解使用</h3><p>第一步：启动类（配置类）开启注解@EnableGlobalMethodSecurity(securedEnabled = true)</p><p>第二步：在controller的方法上添加下面的注解，设置角色或权限</p><p>第三步：在UserDetailService上设置用户所具有的角色或权限</p><p><strong>1.@Secured</strong></p><p>用户具有某个角色，可以访问方法</p><p><strong>2.@PreAuthorize</strong></p><p>在方法执行前检验，在里面写前面说到的四个方法</p><p><strong>3.@PostAuthorize</strong></p><p>在方法执行后检验</p><p><strong>4.@PostFilter</strong></p><p>在方法执行后过滤返回值，可以过滤掉不需要的返回值</p><p><strong>5.@PreFilter</strong></p><p>过滤参数中不需要的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line">  <span class="comment">//@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_admin&quot;&#125;)//哪些角色可以访问</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span><span class="comment">//还有hasAuthorize、hasRole、hasAnyRole</span></span><br><span class="line">  <span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span><span class="comment">//过滤掉返回值中username不是admin1的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      users.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">      users.add(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;24235&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">      System.out.println(users);</span><br><span class="line">      <span class="keyword">return</span> users;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="6-自动登录"><a href="#6-自动登录" class="headerlink" title="6.自动登录"></a>6.自动登录</h3><p>自动登录其实是数据库中维护一个用户信息和加密串的表，cookies中存放加密串，当第一次登录时通过RememberMeService将加密串分别存入cookies和数据库中，第二次访问时，拿cookies的加密串去数据库查询，如果有匹配的并且相隔时间不超过设置的有效时长，那么就能实现自动登录。</p><p>原理图：</p><p><img src="Cookie-zidongdenglu.png" alt="Cookie-zidongdenglu"></p><p>1.配置类，注入数据源，配置操作数据库对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">      JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();<span class="comment">//操作数据库的对象</span></span><br><span class="line">      jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">      <span class="comment">//jdbcTokenRepository.setCreateTableOnStartup(true);//第一次时需要创建表，创建表的sql在源码中有</span></span><br><span class="line">      <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.配置类中配置自动登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.and().rememberMe().tokenRepository(persistentTokenRepository())<span class="comment">//自动登录设置操作数据库的方法</span></span><br><span class="line">        .tokenValiditySeconds(<span class="number">60</span>)<span class="comment">//设置有效时长，单位秒</span></span><br><span class="line">        .userDetailsService(userDetailsService)</span><br></pre></td></tr></table></figure><p>3.登录页面修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span>自动登录</span><br></pre></td></tr></table></figure><blockquote><p>name值一定是remember-me，框架中要求的</p></blockquote><h3 id="7-CSRF–跨站请求伪造"><a href="#7-CSRF–跨站请求伪造" class="headerlink" title="7.CSRF–跨站请求伪造"></a>7.CSRF–跨站请求伪造</h3><blockquote><p>在登录页面添加一个隐藏域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span><span class="attr">th:if</span>=<span class="string">&quot;$&#123;_csrf&#125;!=null&quot;</span><span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span><span class="attr">name</span>=<span class="string">&quot;_csrf</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>关闭安全配置的类中的 csrf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.csrf().disable();</span></span><br></pre></td></tr></table></figure></blockquote><p>CSRF防护步骤：</p><p>1.第一次请求生成csrfToken保存到session或者Cookie中</p><p>2.后面的请求到来时，从请求中提取csrfToken和保存的做比较，判断请求是否合法。主要通过CsrfFilter过滤器完成。</p><h2 id="三、微服务权限方案"><a href="#三、微服务权限方案" class="headerlink" title="三、微服务权限方案"></a>三、微服务权限方案</h2><p>1.根据案例后台用户角色菜单之间的关系构建数据库表：五张表：用户表、角色表、菜单表、用户角色多对多表、角色菜单多对多表。</p><p>2.创建微服务工程，导入依赖，导入一些工具类</p><p>3.编写security认证授权工具类和处理器</p><p><img src="security-weifuwu.png" alt="security-weifuwu"></p><p>1).DefaultPasswordEncoder–密码加密工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultPasswordEncoder</span><span class="params">(<span class="keyword">int</span> strength)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行MD5加密</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MD5.encrypt(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行密码比对</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String encodedPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encodedPassword.equals(MD5.encrypt(charSequence.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有两个方法，一个是密码加密，用在存入数据库时，密码不能用明文存储，所以加密后存储；一个是密码比对，验证登录用户密码是否正确时，使用这个方法。</p></blockquote><p>2).TokenManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//token有效时长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> tokenEcpiration = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">    <span class="comment">//编码秘钥</span></span><br><span class="line">    <span class="keyword">private</span> String tokenSignKey = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">//1 使用jwt根据用户名生成token</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createToken</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String token = Jwts.builder().setSubject(username)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis()+tokenEcpiration))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2 根据token字符串得到用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserInfoFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String userinfo = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();</span><br><span class="line">        <span class="keyword">return</span> userinfo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3 删除token</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeToken</span><span class="params">(String token)</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>三个方法：1.生成Token，根据jwt规则；2.从Token中获取信息，都是用JWT工具类操作；3.删除token（未实现）</p></blockquote><p>3).TokenLogoutHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenLogoutHandler</span> <span class="keyword">implements</span> <span class="title">LogoutHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenLogoutHandler</span><span class="params">(TokenManager tokenManager,RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 从header里面获取token</span></span><br><span class="line">        <span class="comment">//2 token不为空，移除token，从redis删除token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//移除</span></span><br><span class="line">            tokenManager.removeToken(token);</span><br><span class="line">            <span class="comment">//从token获取用户名</span></span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            redisTemplate.delete(username);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseUtil.out(response, R.ok());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务逻辑是退出时将header中的token移除，并且把redis中的token删除</p></blockquote><p>4).UnauthEntryPoint</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnauthEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ResponseUtil.out(httpServletResponse, R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>未授权就报异常</p></blockquote><p>5).TokenLoginFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenLoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenLoginFilter</span><span class="params">(AuthenticationManager authenticationManager, TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="keyword">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.setPostOnly(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.setRequiresAuthenticationRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">&quot;/admin/acl/login&quot;</span>,<span class="string">&quot;POST&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 获取表单提交用户名和密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取表单提交数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), User.class);</span><br><span class="line">            <span class="keyword">return</span> authenticationManager.authenticate(<span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword(),</span><br><span class="line">                    <span class="keyword">new</span> ArrayList&lt;&gt;()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 认证成功调用的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//认证成功，得到认证成功之后用户信息</span></span><br><span class="line">        SecurityUser user = (SecurityUser)authResult.getPrincipal();</span><br><span class="line">        <span class="comment">//根据用户名生成token</span></span><br><span class="line">        String token = tokenManager.createToken(user.getCurrentUserInfo().getUsername());</span><br><span class="line">        <span class="comment">//把用户名称和用户权限列表放到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(),user.getPermissionValueList());</span><br><span class="line">        <span class="comment">//返回token</span></span><br><span class="line">        ResponseUtil.out(response, R.ok().data(<span class="string">&quot;token&quot;</span>,token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 认证失败调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ResponseUtil.out(response, R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>认证过滤器：1.认证前获取表单数据；2.认证成功后生成token，存入redis，返回token到header中；3.失败就返回错误</p></blockquote><p>6).TokenAuthFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenAuthFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenAuthFilter</span><span class="params">(AuthenticationManager authenticationManager,TokenManager tokenManager,RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">        <span class="keyword">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前认证成功用户权限信息</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authRequest = getAuthentication(request);</span><br><span class="line">        <span class="comment">//判断如果有权限信息，放到权限上下文中</span></span><br><span class="line">        <span class="keyword">if</span>(authRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从header获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//从token获取用户名</span></span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            <span class="comment">//从redis获取对应权限列表</span></span><br><span class="line">            List&lt;String&gt; permissionValueList = (List&lt;String&gt;)redisTemplate.opsForValue().get(username);</span><br><span class="line">            Collection&lt;GrantedAuthority&gt; authority = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String permissionValue : permissionValueList) &#123;</span><br><span class="line">                SimpleGrantedAuthority auth = <span class="keyword">new</span> SimpleGrantedAuthority(permissionValue);</span><br><span class="line">                authority.add(auth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username,token,authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从header中获取token，在从token中获取用户信息，到redis查询权限列表，返回</p></blockquote><p>7).TokenWebSecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenManager tokenManager;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> DefaultPasswordEncoder defaultPasswordEncoder;</span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenWebSecurityConfig</span><span class="params">(UserDetailsService userDetailsService, DefaultPasswordEncoder defaultPasswordEncoder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">        <span class="keyword">this</span>.defaultPasswordEncoder = defaultPasswordEncoder;</span><br><span class="line">        <span class="keyword">this</span>.tokenManager = tokenManager;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//设置退出的地址和token，redis操作地址</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> UnauthEntryPoint())<span class="comment">//没有权限访问</span></span><br><span class="line">                .and().csrf().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().logout().logoutUrl(<span class="string">&quot;/admin/acl/index/logout&quot;</span>)<span class="comment">//退出路径</span></span><br><span class="line">                .addLogoutHandler(<span class="keyword">new</span> TokenLogoutHandler(tokenManager,redisTemplate)).and()</span><br><span class="line">                .addFilter(<span class="keyword">new</span> TokenLoginFilter(authenticationManager(), tokenManager, redisTemplate))</span><br><span class="line">                .addFilter(<span class="keyword">new</span> TokenAuthFilter(authenticationManager(), tokenManager, redisTemplate)).httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用userDetailsService和密码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不进行认证的路径，可以直接访问</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>核心配置类：配置自己的过滤器，调用configure进行认证</p></blockquote><p>7).UserDetailsServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名查询数据</span></span><br><span class="line">        User user = userService.selectByUsername(username);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        com.atguigu.security.entity.User curUser = <span class="keyword">new</span> com.atguigu.security.entity.User();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户查询用户权限列表</span></span><br><span class="line">        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line">        SecurityUser securityUser = <span class="keyword">new</span> SecurityUser();</span><br><span class="line">        securityUser.setCurrentUserInfo(curUser);</span><br><span class="line">        securityUser.setPermissionValueList(permissionValueList);</span><br><span class="line">        <span class="keyword">return</span> securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Security框架学习&quot;&gt;&lt;a href=&quot;#Spring-Security框架学习&quot; class=&quot;headerlink&quot; title=&quot;Spring Security框架学习&quot;&gt;&lt;/a&gt;Spring Security框架学习&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Quartz定时任务调度学习</title>
    <link href="http://example.com/2021/01/06/Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/06/Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-06T07:32:29.000Z</published>
    <updated>2021-01-07T06:31:06.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quartz-任务调度"><a href="#Quartz-任务调度" class="headerlink" title="Quartz 任务调度"></a>Quartz 任务调度</h1><h2 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h2><p>1.任务类 Job<br>    Job 就是你想要实现的任务类，每一个必须实现 org.quartz.job 接口，并且只需实现接口定义的 execute()方法<br>2.触发器 Trigger<br>    用来定时，设置什么时间执行任务<br>3.调度器 Schdule<br>    将 Job 和 Trigger 整合起来负责基于 Trigger 设定的时间来执行 Job<br>4.任务实例JobDetail<br>    JobDetail 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。</p><p>5.原理图：<img src="Quartz.png" alt="Quartz"></p><h2 id="二、API-介绍"><a href="#二、API-介绍" class="headerlink" title="二、API 介绍"></a>二、API 介绍</h2><ul><li>Scheduler - 与调度程序交互的主要API。</li><li>Job - 你想要调度器执行的任务组件需要实现的接口</li><li>JobDetail - 用于定义作业的实例。</li><li>Trigger（即触发器） - 定义执行给定作业的计划的组件。</li><li>JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。</li><li>TriggerBuilder - 用于定义/构建触发器实例。</li></ul><p>简单实例：</p><blockquote><p>Job实例类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作执行方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        String formatDate = simpleDateFormat.format(date);</span><br><span class="line">        <span class="comment">//打印工作。。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前正在数据库备份，时间为&quot;</span> + formatDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试类 首先说明一下：</p><p>JobDetail jobDetail = newJob(HelloJob.class) 其实是JobDetail jobDetail =  JobBuilder.newJob(HelloJob.class)，这样写也可以通过原因是静态导入的结果，这样可以导入静态方法，变量等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.JobBuilder.newJob;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.SimpleScheduleBuilder.simpleSchedule;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.TriggerBuilder.newTrigger;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//1.schedule调度器</span></span><br><span class="line">        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        <span class="comment">//2.JobDetail任务实例</span></span><br><span class="line">        JobDetail jobDetail = newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>)<span class="comment">//参数1：任务的名称（唯一实例）参数2：任务组名称</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;111&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//3.trigger触发器</span></span><br><span class="line">        Trigger trigger = newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;grouo1&quot;</span>)<span class="comment">//参数1：触发器的名称（唯一实例）参数2：触发器组名称</span></span><br><span class="line">                .startNow()<span class="comment">//立即执行</span></span><br><span class="line">                .withSchedule(simpleSchedule().repeatSecondlyForever(<span class="number">5</span>))<span class="comment">//每5s执行一次</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;2222&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">      <span class="comment">//绑定触发器和任务实例</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>三大组件：调度器、任务实例、触发器。由原理图可以看出调度器把任务实例和触发器绑定在一起，一旦触发器条件满足，就触发任务开始工作，对HelloJob进行实例</p></blockquote><h2 id="三、Job-与-JobDetail"><a href="#三、Job-与-JobDetail" class="headerlink" title="三、Job 与 JobDetail"></a>三、Job 与 JobDetail</h2><p><strong>Job</strong>:工作任务调度的接口，任务类需要实现该接口。接口中的 excute()方法类似于 JDK 提供的 TimeTask 中的 run()方法，在里面编写业务逻辑。job 的生命周期:<strong>每次调度 job 执行 excute()方法前都会创建一个新的 job 实例</strong>，调用完成后会被释放，被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>JobDetail</strong>:为 job 实例提供许多可设置的属性，以及 JobDataMap 成员变量属性，它用来存储特定 Job 实例的状态信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JobDetail jobDetail = newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;group1&quot;</span>)<span class="comment">//参数1：任务的名称（唯一实例）必须设置 参数2：任务组名称,不设置默认DEFAULT</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;111&quot;</span>)<span class="comment">//JobDataMap参数设置key，value</span></span><br><span class="line">                .build();<span class="comment">//使用的是Builder构建</span></span><br></pre></td></tr></table></figure><h2 id="四、JobExecutionContext-和-JobDataMap"><a href="#四、JobExecutionContext-和-JobDataMap" class="headerlink" title="四、JobExecutionContext 和 JobDataMap"></a>四、JobExecutionContext 和 JobDataMap</h2><p>Context 中包含了许多 JobDetail 和 Trigger 的状态信息，它是 Quartz 运行环境以及 Job 本身的明细数据</p><blockquote><p>HelloJob进一步修改。。主要输出Context中的内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作执行方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        String formatDate = simpleDateFormat.format(date);</span><br><span class="line">        JobKey jobKey = jobExecutionContext.getJobDetail().getKey();<span class="comment">//context里的JobDetail任务实例里的内容</span></span><br><span class="line">        System.out.println(jobKey.getName() + jobKey.getGroup() + jobExecutionContext.getJobDetail().getJobClass().getName());<span class="comment">//name1 group1 cn.aimu.maizhu.job.HelloJob</span></span><br><span class="line">        System.out.println(jobExecutionContext.getJobDetail().getJobClass().getSimpleName());<span class="comment">//HelloJob</span></span><br><span class="line">        System.out.println(jobExecutionContext.getJobDetail().getJobDataMap().get(<span class="string">&quot;message&quot;</span>));<span class="comment">//111</span></span><br><span class="line">        System.out.println(jobExecutionContext.getTrigger().getJobDataMap().get(<span class="string">&quot;message&quot;</span>));<span class="comment">//2222</span></span><br><span class="line">        System.out.println(simpleDateFormat.format(jobExecutionContext.getFireTime()));<span class="comment">//当前工作时间</span></span><br><span class="line">        System.out.println(simpleDateFormat.format(jobExecutionContext.getNextFireTime()));<span class="comment">//下一次工作时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;参数值为：&quot;</span> + message);<span class="comment">//和JobDataMap有关，输出为2222</span></span><br><span class="line">        <span class="comment">//打印工作。。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前正在数据库备份，时间为&quot;</span> + formatDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JobDataMap 一看就知道实现了 Map 接口，是用来存储数据的，非常方便使用 usingJobData()设置 Key 和 Value 即可。Job 实现类中添加 setter 方法对应 JobDataMap 的键值，初始化时会自动调用这些 setter 方法</p><blockquote><p>上面HelloJob定义的message和setter方法就是Job实例时会初始化调用setter，如果jobdetail和trigger中的key相同，那么trigger会覆盖jobdetail中的，如上message输出2222。</p></blockquote><h2 id="五、有状态-Job-和无状态-Job"><a href="#五、有状态-Job-和无状态-Job" class="headerlink" title="五、有状态 Job 和无状态 Job"></a>五、有状态 Job 和无状态 Job</h2><p>有状态是指每次运行 Job 之间会保持一些状态，这些状态存储在 JobDataMap 中；而无状态是指每一次调用都会创建一个新的 JobDataMap。加注解@PersistJobDataAfterExecute</p><blockquote><p>我们改一下测试类的JobDetail中的JobDataMap参数为count，0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.JobDetail任务实例</span></span><br><span class="line">        JobDetail jobDetail = newJob(HelloJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>)<span class="comment">//参数1：任务的名称（唯一实例）参数2：任务组名称</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;count&quot;</span>,<span class="number">0</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><blockquote><p>使用setter方法获取count的值，记住trigger中不要设置count的key，不然就会被覆盖，而且trigger没有状态，我们要用的是Job的实例，所有要改JobDetail，而不是Trigger。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(Integer count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作执行方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        String formatDate = simpleDateFormat.format(date);</span><br><span class="line">        ++count;<span class="comment">//每次加1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据：&quot;</span>+count);<span class="comment">//输出加1后的数据</span></span><br><span class="line">        jobExecutionContext.getJobDetail().getJobDataMap().put(<span class="string">&quot;count&quot;</span>,count);<span class="comment">//存储到JobDataMap中</span></span><br><span class="line">        <span class="comment">//打印工作。。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前正在数据库备份，时间为&quot;</span> + formatDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>存储到JobDataMap中，本来Job生命周期就是执行完execute方法就释放了，JobDataMap也就没有持久化，输出为1，1，1，1，但是加了注解之后JobDataMap被持久化了，所以输出为1，2，3，4。也可以更改配置文件，这个后面会说到。</p></blockquote><h2 id="六、Trigger"><a href="#六、Trigger" class="headerlink" title="六、Trigger"></a>六、Trigger</h2><p>主要分四种:SimpleTrigger、CalendarTrigger、DailyTimeTrigger、CronTrigger。其中 SimpleTrigger 和 CronTrigger 最常用</p><h3 id="1-SimpleTrigger"><a href="#1-SimpleTrigger" class="headerlink" title="1.SimpleTrigger"></a>1.SimpleTrigger</h3><p>简单来说，就是隔多长时间重复多少次的触发器</p><p>有四种属性:开始时间、结束时间、重复次数、重复时间间隔。</p><p>当结束时间和重复次数冲突时，以结束时间为准。也就是结束时间属性优先于重复次数属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.trigger触发器</span></span><br><span class="line">        Trigger trigger = newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;grouo1&quot;</span>)<span class="comment">//参数1：触发器的名称（唯一实例）参数2：触发器组名称</span></span><br><span class="line">                .startAt(startDate)<span class="comment">//以某时间开始</span></span><br><span class="line"><span class="comment">//          .startNow()//立即开始</span></span><br><span class="line">          .endAt(endDate)<span class="comment">//以某一时间结束</span></span><br><span class="line">               .withSchedule(SimpleScheduleBuilder.simpleSchedule()<span class="comment">//SimpleTrigger</span></span><br><span class="line">                             .repeatSecondlyForever(<span class="number">5</span>)<span class="comment">//5s重复一次</span></span><br><span class="line">                             .withRepeatCount(<span class="number">3</span>))<span class="comment">//重复4次</span></span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span> ,<span class="string">&quot;2222&quot;</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><h3 id="2-CronTrigger"><a href="#2-CronTrigger" class="headerlink" title="2.CronTrigger"></a>2.CronTrigger</h3><p>最重要的是 Cron表达式，是以日历为基础的，按日历上来进行触发，比如几月几日，或者第几周的周几等等。关于Cron表达式在下一篇文章中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Trigger trigger = newTrigger()</span><br><span class="line">                .withIdentity(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;grouo1&quot;</span>)<span class="comment">//参数1：触发器的名称（唯一实例）参数2：触发器组名称</span></span><br><span class="line">                .startAt(startDate)<span class="comment">//立即执行</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;* * * * * ?&quot;</span>))</span><br><span class="line">                .usingJobData(<span class="string">&quot;message&quot;</span> ,<span class="string">&quot;2222&quot;</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><h2 id="七、Listener监听器"><a href="#七、Listener监听器" class="headerlink" title="七、Listener监听器"></a>七、Listener监听器</h2><p>监听器就是可以在某个类作用前后进行某些方法的调用，以实现某些功能</p><h3 id="1-JobListener"><a href="#1-JobListener" class="headerlink" title="1.JobListener"></a>1.JobListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobListener</span> <span class="keyword">implements</span> <span class="title">JobListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String simpleName = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(<span class="string">&quot;监听器名称：&quot;</span> + simpleName);</span><br><span class="line">        <span class="keyword">return</span> simpleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobToBeExecuted</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        String name = jobExecutionContext.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;  Schedule在JobDetail将要被执行时调用的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobExecutionVetoed</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        String name = jobExecutionContext.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;  Schedule在JobDetail将要被执行,但被否决时调用的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobWasExecuted</span><span class="params">(JobExecutionContext jobExecutionContext, JobExecutionException e)</span> </span>&#123;</span><br><span class="line">        String name = jobExecutionContext.getJobDetail().getKey().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;  Schedule在JobDetail被执行之后调用的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scheduler.scheduleJob(jobDetail,trigger);</span><br><span class="line">    <span class="comment">//创建一个并注册全局Listener</span></span><br><span class="line">    <span class="comment">//scheduler.getListenerManager().addJobListener(new MyJobListener(), EverythingMatcher.allJobs());</span></span><br><span class="line">    <span class="comment">//创建一个并注册局部Listener</span></span><br><span class="line">    scheduler.getListenerManager().addJobListener(<span class="keyword">new</span> MyJobListener(),KeyMatcher</span><br><span class="line">                                                  .keyEquals(JobKey.jobKey(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;group1&quot;</span>)));</span><br><span class="line">scheduler.start();</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>分为创建全局Listener与局部Listener</p></blockquote><h3 id="2-TriggerListener"><a href="#2-TriggerListener" class="headerlink" title="2.TriggerListener"></a>2.TriggerListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTriggerListener</span> <span class="keyword">implements</span> <span class="title">TriggerListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String simpleName = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(simpleName);</span><br><span class="line">        <span class="keyword">return</span> simpleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerFired</span><span class="params">(Trigger trigger, JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        String name = trigger.getKey().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;被触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">vetoJobExecution</span><span class="params">(Trigger trigger, JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        String name = trigger.getKey().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;没有被触发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//true表示不触发，</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerMisfired</span><span class="params">(Trigger trigger)</span> </span>&#123;</span><br><span class="line">        String name = trigger.getKey().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;错过触发&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerComplete</span><span class="params">(Trigger trigger, JobExecutionContext jobExecutionContext, Trigger.CompletedExecutionInstruction completedExecutionInstruction)</span> </span>&#123;</span><br><span class="line">        String name = trigger.getKey().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;完成后触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scheduler.scheduleJob(jobDetail,trigger);</span><br><span class="line">    <span class="comment">//创建一个并注册全局Listener</span></span><br><span class="line">    <span class="comment">//scheduler.getListenerManager()</span></span><br><span class="line"><span class="comment">//.addTriggerListener(new MyTriggerListener(), EverythingMatcher.allTriggers());</span></span><br><span class="line">    <span class="comment">//创建一个并注册局部Listener</span></span><br><span class="line">    scheduler.getListenerManager()</span><br><span class="line">      .addTriggerListener(<span class="keyword">new</span> MyTriggerListener(),KeyMatcher</span><br><span class="line">                          .keyEquals(TriggerKey.triggerKey(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;group1&quot;</span>)));</span><br><span class="line">    scheduler.start();</span><br></pre></td></tr></table></figure><h3 id="3-ScheduleListener"><a href="#3-ScheduleListener" class="headerlink" title="3.ScheduleListener"></a>3.ScheduleListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySchedulerListener</span> <span class="keyword">implements</span> <span class="title">SchedulerListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobScheduled</span><span class="params">(Trigger trigger)</span> </span>&#123;</span><br><span class="line">        String name = trigger.getKey().getName();</span><br><span class="line">        System.out.println(name+ <span class="string">&quot; 完成部署&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobUnscheduled</span><span class="params">(TriggerKey triggerKey)</span> </span>&#123;</span><br><span class="line">        String name = triggerKey.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;完成卸载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerFinalized</span><span class="params">(Trigger trigger)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;触发器被移除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerPaused</span><span class="params">(TriggerKey triggerKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggersPaused</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;触发器组&quot;</span>+s+<span class="string">&quot;被暂停&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggerResumed</span><span class="params">(TriggerKey triggerKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">triggersResumed</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;组&quot;</span>+s+<span class="string">&quot;被恢复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobAdded</span><span class="params">(JobDetail jobDetail)</span> </span>&#123;</span><br><span class="line">        String name = jobDetail.getKey().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;job添加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobDeleted</span><span class="params">(JobKey jobKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobPaused</span><span class="params">(JobKey jobKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;暂停任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobsPaused</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobResumed</span><span class="params">(JobKey jobKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobsResumed</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerError</span><span class="params">(String s, SchedulerException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出现错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerInStandbyMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处于Standby挂起时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerStarting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerShutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulerShuttingdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedulingDataCleared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据被清除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduler.scheduleJob(jobDetail,trigger);</span><br><span class="line">    scheduler.getListenerManager().addSchedulerListener(<span class="keyword">new</span> MySchedulerListener());</span><br><span class="line">    scheduler.start();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Quartz-任务调度&quot;&gt;&lt;a href=&quot;#Quartz-任务调度&quot; class=&quot;headerlink&quot; title=&quot;Quartz 任务调度&quot;&gt;&lt;/a&gt;Quartz 任务调度&lt;/h1&gt;&lt;h2 id=&quot;一、概念介绍&quot;&gt;&lt;a href=&quot;#一、概念介绍&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CronTrigger之Cron表达式学习</title>
    <link href="http://example.com/2021/01/06/CronTrigger%E4%B9%8BCron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2021/01/06/CronTrigger%E4%B9%8BCron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-06T07:25:40.000Z</published>
    <updated>2021-01-06T07:28:14.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CronTrigger之Cron表达式学习"><a href="#CronTrigger之Cron表达式学习" class="headerlink" title="CronTrigger之Cron表达式学习"></a>CronTrigger之Cron表达式学习</h1><h3 id="1-Cron表达式："><a href="#1-Cron表达式：" class="headerlink" title="1.Cron表达式："></a>1.Cron表达式：</h3><p>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p><h3 id="2-各字段含义"><a href="#2-各字段含义" class="headerlink" title="2.各字段含义"></a>2.各字段含义</h3><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0～59整数</td><td>，- * /</td></tr><tr><td>分（Minutes）</td><td>0～59整数</td><td>，- * /</td></tr><tr><td>小时（Hours）</td><td>0～23整数</td><td>，- * /</td></tr><tr><td>日期（DayofMonth）</td><td>1～31整数（需要考虑月的天数）</td><td>，- * / L W C</td></tr><tr><td>月份（Month）</td><td>1～12整数或者JAN-DEC</td><td>，- * /</td></tr><tr><td>星期（DayofWeek）</td><td>1～7整数或者SUN-SAT（1=SUN）</td><td>，- * / L W C #</td></tr><tr><td>年（可选，留空）（Year）</td><td>1970～2099</td><td>，- * /</td></tr></tbody></table><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><p>　　（1）<em>：表示匹配该域的任意值。假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</p><p>　　（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</p><p>　　（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p><p>　　（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. </p><p>　　（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p><p>　　（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p><p>　　（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p><p>　　（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p><p>　　（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p><h3 id="4-常用表达式例子"><a href="#4-常用表达式例子" class="headerlink" title="4.常用表达式例子"></a>4.常用表达式例子</h3><p>　　（1）<strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点调整任务</p><p>　　（2）<strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p><p>　　（3）<strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p>　　（4）<strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点 </p><p>　　（5）<strong>0 0/30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时 </p><p>　　（6）<strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点 </p><p>　　（7）<strong>0 0 12 * * ?</strong>  每天中午12点触发 </p><p>　　（8）<strong>0 15 10 ? * *</strong>   每天上午10:15触发 </p><p>　　（9）<strong>0 15 10 * * ?</strong>   每天上午10:15触发 </p><p>　　（10）<strong>0 15 10 * * ? *</strong>   每天上午10:15触发 </p><p>　　（11）<strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发 </p><p>　　（12）<strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发 </p><p>　　（13）<strong>0 0/5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发 </p><p>　　（14）<strong>0 0/5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p><p>　　（15）<strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发 </p><p>　　（16）<strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发 </p><p>　　（17）<strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发 </p><p>　　（18）<strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发 </p><p>　　（19）<strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发 </p><p>　　（20）<strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发 </p><p>　　（21）<strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发 </p><p>　　（22）<strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CronTrigger之Cron表达式学习&quot;&gt;&lt;a href=&quot;#CronTrigger之Cron表达式学习&quot; class=&quot;headerlink&quot; title=&quot;CronTrigger之Cron表达式学习&quot;&gt;&lt;/a&gt;CronTrigger之Cron表达式学习&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习第二天</title>
    <link href="http://example.com/2020/12/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://example.com/2020/12/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2020-12-21T09:04:00.000Z</published>
    <updated>2020-12-22T05:51:12.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置"><a href="#Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置" class="headerlink" title="Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置"></a>Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置</h1><h2 id="一、回顾"><a href="#一、回顾" class="headerlink" title="一、回顾"></a>一、回顾</h2><p><img src="Mybatis-zidingyi.png" alt="Mybatis-zidingyi"></p><h2 id="二、基于代理Dao的CRUD操作"><a href="#二、基于代理Dao的CRUD操作" class="headerlink" title="二、基于代理Dao的CRUD操作"></a>二、基于代理Dao的CRUD操作</h2><h3 id="1-持久化接口"><a href="#1-持久化接口" class="headerlink" title="1.持久化接口"></a>1.持久化接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有User对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> User对象的list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 id 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响数据库记录的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响数据库记录的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-IUserDao-xml"><a href="#2-IUserDao-xml" class="headerlink" title="2.IUserDao.xml"></a>2.IUserDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置保存时获取插入的 id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username,birthday,sex,address)</span><br><span class="line">        values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根据名称模糊查询 </span></span><br><span class="line"><span class="comment">  &lt;select id=&quot;findByName&quot; parameterType=&quot;string&quot; resultType=&quot;com.itheima.domain.User&quot;&gt;</span></span><br><span class="line"><span class="comment">select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span></span><br><span class="line"><span class="comment">&lt;/select&gt; --&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 查询总记录条数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-测试类"><a href="#3-测试类" class="headerlink" title="3.测试类"></a>3.测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in ;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line">    <span class="meta">@Before</span><span class="comment">//在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfigure.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建构建者对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//3.创建 SqlSession 工厂对象</span></span><br><span class="line">        factory = builder.build(in);</span><br><span class="line">        <span class="comment">//4.创建 SqlSession 对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">//5.创建 Dao 的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//查询一个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//6.执行操作</span></span><br><span class="line">        User user = userDao.findById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;modify User property&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市顺义区&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">&quot;保存操作之前：&quot;</span>+user);</span><br><span class="line"><span class="comment">//5.执行保存方法</span></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存操作之后：&quot;</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.根据 id 查询</span></span><br><span class="line">        User user = userDao.findById(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.更新操作</span></span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市顺义区&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> res = userDao.updateUser(user);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//6.执行操作</span></span><br><span class="line">        <span class="keyword">int</span> res = userDao.deleteUser(<span class="number">3</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//5.执行查询一个方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//5.执行查询一个方法</span></span><br><span class="line">List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;王&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">//查询总数据条数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//6.执行操作</span></span><br><span class="line">        <span class="keyword">int</span> res = userDao.findTotal();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span><span class="comment">//在测试方法执行完成之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-与-区别"><a href="#4-与-区别" class="headerlink" title="4.#{}与${}区别"></a>4.#{}与${}区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125;表示一个占位符号</span><br><span class="line">通过#&#123;&#125;可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，</span><br><span class="line">#&#123;&#125;可以有效防止 sql 注入。 #&#123;&#125;可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类</span><br><span class="line">型值，#&#123;&#125;括号中可以是 value 或其它名称。</span><br><span class="line">$&#123;&#125;表示拼接 sql 串</span><br><span class="line">通过$&#123;&#125;可以将 parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， $&#123;&#125;可以接收简</span><br><span class="line">单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，$&#123;&#125;括号中只能是 value。</span><br></pre></td></tr></table></figure><h2 id="三、Mybatis参数深入"><a href="#三、Mybatis参数深入" class="headerlink" title="三、Mybatis参数深入"></a>三、Mybatis参数深入</h2><h3 id="parameterType配置参数"><a href="#parameterType配置参数" class="headerlink" title="parameterType配置参数"></a>parameterType配置参数</h3><blockquote><p>我们在上一章节中已经介绍了 SQL 语句传参，使用标签的 parameterType 属性来设定。该属性的取值可以是基本类型，引用类型（例如:String 类型），还可以是实体类类型（POJO 类）。同时也可以使用实体类的包装类，本章节将介绍如何使用实体类的包装类作为参数传递。</p></blockquote><p>注意事项</p><blockquote><p>基 本 类 型 和 String 我 们 可 以 直 接 写 类 型 名 称 ， 也 可 以 使 用 包 名 . 类 名 的 方 式 ， 例 如 ：java.lang.String。</p><p>实体类类型，目前我们只能使用全限定类名。</p><p>究其原因，是 mybaits 在加载时已经把常用的数据类型注册了别名，从而我们在使用时可以不写包名，</p><p>而我们的是实体类并没有注册别名，所以必须写全限定类名。在今天课程的最后一个章节中将讲解如何注册实体类</p><p>的别名。</p></blockquote><h3 id="1-编写QueryVo"><a href="#1-编写QueryVo" class="headerlink" title="1.编写QueryVo"></a>1.编写QueryVo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-编写持久层Dao"><a href="#2-编写持久层Dao" class="headerlink" title="2.编写持久层Dao"></a>2.编写持久层Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据 QueryVo 中的条件查询用户</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> vo</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">findByVo</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-编写Dao-xml"><a href="#3-编写Dao-xml" class="headerlink" title="3.编写Dao.xml"></a>3.编写Dao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByVo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;aimu.maizhu.pojo.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user where username like #&#123;user.username&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-编写测试类"><a href="#4-编写测试类" class="headerlink" title="4.编写测试类"></a>4.编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByQueryVo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">        vo.setUser(user);</span><br><span class="line">        List&lt;User&gt; users = userDao.findByVo(vo);</span><br><span class="line">        <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、Mybatis输出结果封装"><a href="#四、Mybatis输出结果封装" class="headerlink" title="四、Mybatis输出结果封装"></a>四、Mybatis输出结果封装</h2><h3 id="1-resultType结果类型"><a href="#1-resultType结果类型" class="headerlink" title="1.resultType结果类型"></a>1.resultType结果类型</h3><blockquote><p>需要注意的是，它和 parameterType 一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。例如：我们的实体类此时必须是全限定类名（今天最后一个章节会讲解如何配置实体类的别名）</p><p>同时，当是实体类名称是，还有一个要求，实体类中的属性名称必须和查询语句中的列名保持一致，否则无法实现封装。</p></blockquote><blockquote><p>若不一致，有两种办法解决，要么sql语句起别名，耀目使用resultMap结果类型</p></blockquote><h3 id="2-resultMap结果类型"><a href="#2-resultMap结果类型" class="headerlink" title="2.resultMap结果类型"></a>2.resultMap结果类型</h3><blockquote><p>resultMap 标签可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装。</p><p>在 select 标签中使用 resultMap 属性指定引用即可。同时 resultMap 可以实现将查询结果映射为复杂类型的 pojo，比如在查询结果映射对象中包括 pojo 和 list 实现一对一查询和一对多查询。</p></blockquote><p>在Dao.xml中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建立 User 实体和数据库表的对应关系</span></span><br><span class="line"><span class="comment">type 属性：指定实体类的全限定类名</span></span><br><span class="line"><span class="comment">id 属性：给定一个唯一标识，是给查询 select 标签引用用的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id 标签：用于指定主键字段</span></span><br><span class="line"><span class="comment">result 标签：用于指定非主键字段</span></span><br><span class="line"><span class="comment">column 属性：用于指定数据库列名</span></span><br><span class="line"><span class="comment">property 属性：用于指定实体类属性名称--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>resultMap中的id与select中的resultMap相对应</p></blockquote><h2 id="五、SqlMapConfig配置"><a href="#五、SqlMapConfig配置" class="headerlink" title="五、SqlMapConfig配置"></a>五、SqlMapConfig配置</h2><h3 id="1-SqlMapConfig配置内容和顺序"><a href="#1-SqlMapConfig配置内容和顺序" class="headerlink" title="1.SqlMapConfig配置内容和顺序"></a>1.SqlMapConfig配置内容和顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-properties（属性）</span><br><span class="line">--property</span><br><span class="line">-settings（全局配置参数）</span><br><span class="line">--setting</span><br><span class="line">-typeAliases（类型别名）</span><br><span class="line">--typeAliase</span><br><span class="line">--package</span><br><span class="line">-typeHandlers（类型处理器）</span><br><span class="line">-objectFactory（对象工厂）</span><br><span class="line">-plugins（插件）</span><br><span class="line">-environments（环境集合属性对象）</span><br><span class="line">--environment（环境子属性对象）</span><br><span class="line">---transactionManager（事务管理）</span><br><span class="line">---dataSource（数据源）</span><br><span class="line">-mappers（映射器）</span><br><span class="line">--mapper</span><br><span class="line">--package</span><br></pre></td></tr></table></figure><h3 id="2-properties属性"><a href="#2-properties属性" class="headerlink" title="2.properties属性"></a>2.properties属性</h3><h4 id="properties属性配置一"><a href="#properties属性配置一" class="headerlink" title="properties属性配置一"></a>properties属性配置一</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="properties属性配置二"><a href="#properties属性配置二" class="headerlink" title="properties属性配置二"></a>properties属性配置二</h4><p>在classpath下定义db.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/eesy</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">file:///D:/IdeaProjects/day02_eesy_01mybatisCRUD/src/main/resources/jdbcConfig.properties</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-typeAliases（类型别名）"><a href="#3-typeAliases（类型别名）" class="headerlink" title="3.typeAliases（类型别名）"></a>3.typeAliases（类型别名）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个别名定义 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;其它包&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-mappers（映射器）"><a href="#4-mappers（映射器）" class="headerlink" title="4.mappers（映射器）"></a>4.mappers（映射器）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用相对类路径的资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/dao/IUserDao.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用mapper接口类路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册指定包下的所有 mapper 接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.itcast.mybatis.mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置&quot;&gt;&lt;a href=&quot;#Mybatis基本CRUD、参数类型、返回类型、SqlMapConfig配置&quot; class=&quot;headerlink&quot; title=&quot;Mybatis基本CRUD、参数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习第三天</title>
    <link href="http://example.com/2020/12/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://example.com/2020/12/21/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2020-12-21T09:03:54.000Z</published>
    <updated>2020-12-25T09:10:43.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多"><a href="#Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多" class="headerlink" title="Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多"></a>Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多</h1><h2 id="一、Mybatis连接池与事务深入"><a href="#一、Mybatis连接池与事务深入" class="headerlink" title="一、Mybatis连接池与事务深入"></a>一、Mybatis连接池与事务深入</h2><h3 id="1-连接池技术"><a href="#1-连接池技术" class="headerlink" title="1.连接池技术"></a>1.连接池技术</h3><blockquote><p>在 Mybatis 的 SqlMapConfig.xml 配置文件中，通过<dataSource type="pooled">来实现 Mybatis 中连接池的配置。</p></blockquote><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>UNPOOLED 不使用连接池的数据源</p></li><li><p>POOLED 使用连接池的数据源</p></li><li><p>JNDI 使用 JNDI 实现的数据源</p></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>MyBatis 在初始化时，根据<dataSource>的 type 属性来创建相应类型的的数据源 DataSource</p></blockquote><h4 id="连接的获取分析"><a href="#连接的获取分析" class="headerlink" title="连接的获取分析"></a>连接的获取分析</h4><p><img src="Mybatis.jpg" alt="Mybatis"></p><blockquote><p>真正连接打开的时间点，只是在我们执行SQL语句时，才会进行。其实这样做我们也可以进一步发现，数据库连接是我们最为宝贵的资源，只有在要用到的时候，才去获取并打开连接，当我们用完了就再立即将数据库连接归还到连接池中。</p></blockquote><h3 id="2-事务控制"><a href="#2-事务控制" class="headerlink" title="2.事务控制"></a>2.事务控制</h3><h4 id="JDBC事务回顾"><a href="#JDBC事务回顾" class="headerlink" title="JDBC事务回顾"></a>JDBC事务回顾</h4><blockquote><p>在 JDBC 中我们可以通过手动方式将事务的提交改为手动方式，通过 setAutoCommit()方法就可以调整。</p></blockquote><blockquote><p>那么我们的 Mybatis 框架因为是对 JDBC 的封装，所以 Mybatis 框架的事务控制方式，本身也是用 JDBC 的setAutoCommit()方法来设置事务提交方式的。</p></blockquote><h4 id="Mybatis的事务控制"><a href="#Mybatis的事务控制" class="headerlink" title="Mybatis的事务控制"></a>Mybatis的事务控制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.commit();</span><br></pre></td></tr></table></figure><blockquote><p>这是我们的 Connection 的整个变化过程，通过分析我们能够发现之前的 CUD 操作过程中，我们都要手动进行事务的提交，原因是 setAutoCommit()方法，在执行时它的值被设置为 false 了，所以我们在 CUD 操作中，必须通过 sqlSession.commit()方法来执行提交操作。</p></blockquote><h4 id="Mybatis自动事务提交"><a href="#Mybatis自动事务提交" class="headerlink" title="Mybatis自动事务提交"></a>Mybatis自动事务提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>我们发现，此时事务就设置为自动提交了，同样可以实现CUD操作时记录的保存。虽然这也是一种方式，但就编程而言，设置为自动提交方式为 false 再根据情况决定是否进行提交，这种方式更常用。因为我们可以根据业务情况来决定提交是否进行提交。</p></blockquote><h2 id="二、Mybatis动态Sql"><a href="#二、Mybatis动态Sql" class="headerlink" title="二、Mybatis动态Sql"></a>二、Mybatis动态Sql</h2><h3 id="1-标签-lt-if-gt"><a href="#1-标签-lt-if-gt" class="headerlink" title="1.标签&lt;if&gt;"></a>1.标签&lt;if&gt;</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName!=null and userName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and username like #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userAddress != null&quot;</span>&gt;</span></span><br><span class="line">            and address like #&#123;userAddress&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们根据实体类的不同取值，使用不同的 SQL 语句来进行查询。比如在 id 如果不为空时可以根据 id 查询，如果 username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p></blockquote><h3 id="2-标签-lt-where-gt"><a href="#2-标签-lt-where-gt" class="headerlink" title="2.标签&lt;where&gt;"></a>2.标签&lt;where&gt;</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户信息查询 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultSql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">and username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null&quot;</span>&gt;</span></span><br><span class="line">and address like #&#123;address&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了简化上面 where 1=1 的条件拼装，我们可以采用<where>标签来简化开发。</p></blockquote><h3 id="3-标签-lt-foreach-gt"><a href="#3-标签-lt-foreach-gt" class="headerlink" title="3.标签&lt;foreach&gt;"></a>3.标签&lt;foreach&gt;</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><blockquote><p>传入多个 id 查询用户信息，用下边两个 sql 实现：</p><p>SELECT * FROM USERS WHERE username LIKE ‘%张%’ AND (id =10 OR id =89 OR id=16)</p><p>SELECT * FROM USERS WHERE username LIKE ‘%张%’ AND id IN (10,89,16)</p><p>这样我们在进行范围查询时，就要将一个集合中的值，作为参数动态添加进来。这样我们将如何进行参数的传递？</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有用户在 id 的集合之中 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findInIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;queryvo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- select * from user where id in (1,2,3,4,5); --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultSql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in ( &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SQL 语句：</span></span><br><span class="line"><span class="comment">select 字段 from user where id in (?)</span></span><br><span class="line"><span class="comment">&lt;foreach&gt;标签用于遍历集合，它的属性：</span></span><br><span class="line"><span class="comment">collection:代表要遍历的集合元素，注意编写时不要写#&#123;&#125;</span></span><br><span class="line"><span class="comment">open:代表语句的开始部分</span></span><br><span class="line"><span class="comment">close:代表结束部分</span></span><br><span class="line"><span class="comment">item:代表遍历集合的每个元素，生成的变量名</span></span><br><span class="line"><span class="comment">sperator:代表分隔符--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-简化编写Sql片段"><a href="#4-简化编写Sql片段" class="headerlink" title="4.简化编写Sql片段"></a>4.简化编写Sql片段</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽取重复的语句代码片段 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;defaultSql&quot;</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultSql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置根据id查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;UsEr&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultSql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、Mybatis多表查询之一对多"><a href="#三、Mybatis多表查询之一对多" class="headerlink" title="三、Mybatis多表查询之一对多"></a>三、Mybatis多表查询之一对多</h2><h3 id="1-一对一查询（多对一）"><a href="#1-一对一查询（多对一）" class="headerlink" title="1.一对一查询（多对一）"></a>1.一对一查询（多对一）</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><h5 id="1-定义账户信息实体类"><a href="#1-定义账户信息实体类" class="headerlink" title="1.定义账户信息实体类"></a>1.定义账户信息实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本账户信息类–和方式二不同</p></blockquote><h5 id="2-定义账户用户关联类AccountUser"><a href="#2-定义账户用户关联类AccountUser" class="headerlink" title="2.定义账户用户关联类AccountUser"></a>2.定义账户用户关联类AccountUser</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义这个类及包含了用户信息也包含了账户信息–实现一对一每个账户都有一个用户</p></blockquote><h5 id="3-持久层接口"><a href="#3-持久层接口" class="headerlink" title="3.持久层接口"></a>3.持久层接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时获取账户的名字，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AccountUser的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;AccountUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-AccountDao-xml"><a href="#4-AccountDao-xml" class="headerlink" title="4.AccountDao.xml"></a>4.AccountDao.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IAccountDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.AccountUser&quot;</span>&gt;</span></span><br><span class="line">        select a.*,u.* from account a, user u where a.uid =u.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-测试类"><a href="#5-测试类" class="headerlink" title="5.测试类"></a>5.测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试查询所有账户信息--一对一(多对一)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;AccountUser&gt; accountUsers = accountDao.findAll();</span><br><span class="line">    <span class="keyword">for</span> (AccountUser ac : accountUsers)&#123;</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">        System.out.println(ac.getId());</span><br><span class="line">        System.out.println(ac.getMoney());</span><br><span class="line">        System.out.println(ac.getUid());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><h5 id="1-修改Account类"><a href="#1-修改Account类" class="headerlink" title="1.修改Account类"></a>1.修改Account类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入User对象，这样返回Account时就可以携带User信息，这种方式比较常用，和多对一相对应</p></blockquote><h5 id="2-修改接口Dao"><a href="#2-修改接口Dao" class="headerlink" title="2.修改接口Dao"></a>2.修改接口Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户，同时获取账户的名字，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AccountUser的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>集合的泛型修改为Account</p></blockquote><h5 id="3-重新定义Dao-xml"><a href="#3-重新定义Dao-xml" class="headerlink" title="3.重新定义Dao.xml"></a>3.重新定义Dao.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IAccountDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;AccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;aimu.maizhu.pojo.Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AccountMap&quot;</span>&gt;</span></span><br><span class="line">        select a.*,u.* from account a, user u where a.uid =u.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>resultMap中的association标签表示引入的实体类（从表的方面来说），表示Account中包含User实体属性，javaType表示实体类的类型，配置完别忘了select标签的resultMap的设置</p></blockquote><h5 id="4-修改测试类"><a href="#4-修改测试类" class="headerlink" title="4.修改测试类"></a>4.修改测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试查询所有账户信息--一对一(多对一)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll02</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">      <span class="keyword">for</span> (Account ac : accounts)&#123;</span><br><span class="line">          System.out.println(ac);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上是对Mybatis一对一（多对一）查询的基本配置的两种方式，下面介绍一对多查询。</p><h3 id="2-一对多查询"><a href="#2-一对多查询" class="headerlink" title="2.一对多查询"></a>2.一对多查询</h3><h5 id="1-编写sql语句"><a href="#1-编写sql语句" class="headerlink" title="1.编写sql语句"></a>1.编写sql语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.*,a.id <span class="keyword">as</span> aid ,a.uid,a.money <span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">account</span> a <span class="keyword">on</span> u.id =a.uid</span><br></pre></td></tr></table></figure><h5 id="2-User类加入List-lt-Account-gt"><a href="#2-User类加入List-lt-Account-gt" class="headerlink" title="2.User类加入List&lt;Account&gt;"></a>2.User类加入List&lt;Account&gt;</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加入了List集合进去，表示一个User可能对应多个Account</p></blockquote><h5 id="3-持久层加入方法"><a href="#3-持久层加入方法" class="headerlink" title="3.持久层加入方法"></a>3.持久层加入方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询所有用户，同时获取出每个用户下的所有账户信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h5 id="4-xml配置"><a href="#4-xml配置" class="headerlink" title="4.xml配置"></a>4.xml配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;aimu.maizhu.pojo.Account&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select u.*,a.id as aid ,a.uid,a.money from user u left outer join account a on u.id =a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一对多的配置中collection 是用于建立一对多中集合属性的对应关系</p><p>ofType 用于指定集合元素的数据类型</p></blockquote><h5 id="5-测试方法"><a href="#5-测试方法" class="headerlink" title="5.测试方法"></a>5.测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//6.执行操作</span></span><br><span class="line">       List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">       <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;-------每个用户的内容---------&quot;</span>);</span><br><span class="line">           System.out.println(user);</span><br><span class="line">           System.out.println(user.getAccounts());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一对多完成，接下来是多对多</p><h2 id="四、Mybatis多表查询之多对多"><a href="#四、Mybatis多表查询之多对多" class="headerlink" title="四、Mybatis多表查询之多对多"></a>四、Mybatis多表查询之多对多</h2><blockquote><p>通过前面的学习，我们使用 Mybatis 实现一对多关系的维护。多对多关系其实我们看成是双向的一对多关系。</p></blockquote><h3 id="1-从Role到User多对多"><a href="#1-从Role到User多对多" class="headerlink" title="1.从Role到User多对多"></a>1.从Role到User多对多</h3><p>1.sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">r.*,u.id uid,</span><br><span class="line">u.username username,</span><br><span class="line">u.birthday birthday,</span><br><span class="line">u.sex sex,</span><br><span class="line">u.address address</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">ROLE</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">USER_ROLE ur</span><br><span class="line"><span class="keyword">ON</span> ( r.id = ur.rid)</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line"><span class="keyword">USER</span> u</span><br><span class="line"><span class="keyword">ON</span> (ur.uid = u.id);</span><br></pre></td></tr></table></figure><p>2.Role实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer roleId;</span><br><span class="line"><span class="keyword">private</span> String roleName;</span><br><span class="line">  <span class="keyword">private</span> String roleDesc;</span><br><span class="line"><span class="comment">//多对多的关系映射：一个角色可以赋予多个用户</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Role持久层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 黑马程序员</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Company</span> http://www.ithiema.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRoleDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有角色</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.编写xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.IRoleDao&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义 role 表的 ResultMap--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;roleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;role&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;users&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;user&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;roleMap&quot;</span>&gt;</span></span><br><span class="line">select u.*,r.id as rid,r.role_name,r.role_desc from role r left outer join user_role ur on r.id = ur.rid</span><br><span class="line">left outer join user u on u.id = ur.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上操作相当于一对多关系，xml设置的resultMap和一对多的一样</p></blockquote><p>5.测试。。略</p><h3 id="2-从User到Role多对多"><a href="#2-从User到Role多对多" class="headerlink" title="2.从User到Role多对多"></a>2.从User到Role多对多</h3><blockquote><p>从 User 出发，我们也可以发现一个用户可以具有多个角色，这样用户到角色的关系也还是一对多关系。这样</p><p>我们就可以认为 User 与 Role 的多对多关系，可以被拆解成两个一对多关系来实现。</p></blockquote><h1 id="Mybatis延迟加载、缓存、注解开发"><a href="#Mybatis延迟加载、缓存、注解开发" class="headerlink" title="Mybatis延迟加载、缓存、注解开发"></a>Mybatis延迟加载、缓存、注解开发</h1><h2 id="一、延迟加载"><a href="#一、延迟加载" class="headerlink" title="一、延迟加载"></a>一、延迟加载</h2><blockquote><p>延迟加载：</p><p>​    就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.</p><p>好处：</p><p>​    先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p><p>坏处：</p><p>​    因为只有当需要用到数据时，才会进行数据库查询，这样在大批量数据查询时，因为查询工作也要消耗时间，所以可能造成用户等待时间变长，造成用户体验下降。</p><h3 id="association、collection-具备延迟加载功能。"><a href="#association、collection-具备延迟加载功能。" class="headerlink" title="association、collection 具备延迟加载功能。"></a>association、collection 具备延迟加载功能。</h3></blockquote><h3 id="1-使用association实现延迟加载"><a href="#1-使用association实现延迟加载" class="headerlink" title="1.使用association实现延迟加载"></a>1.使用association实现延迟加载</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span><span class="attr">select</span>=<span class="string">&quot;com.itheima.dao.IUserDao.findById&quot;</span><span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>select： 填写我们要调用的 select 映射的 id </p><p>column ： 填写我们要传递给 select 映射的参数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>开启延迟加载 配置SqlMapConfig</p></blockquote><h3 id="2-使用collection实现延迟加载"><a href="#2-使用collection实现延迟加载" class="headerlink" title="2.使用collection实现延迟加载"></a>2.使用collection实现延迟加载</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- collection 是用于建立一对多中集合属性的对应关系</span></span><br><span class="line"><span class="comment">ofType 用于指定集合元素的数据类型</span></span><br><span class="line"><span class="comment">select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）</span></span><br><span class="line"><span class="comment">column 是用于指定使用哪个字段的值作为条件查询</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itheima.dao.IAccountDao.findByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>select</strong> <strong>属性：</strong></p><p>用于指定查询 account 列表的 sql 语句，所以填写的是该 sql 映射的 id</p><p><strong>column</strong> <strong>属性：</strong></p><p>用于指定 select 属性的 sql 语句的参数来源，上面的参数来自于 user 的 id 列，所以就写成 id 这一</p><p>个字段名了</p></blockquote><h2 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h2><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1.一级缓存"></a>1.一级缓存</h3><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//6.执行操作</span></span><br><span class="line">User user = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;第一次查询的用户：&quot;</span>+user);</span><br><span class="line">User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;第二次查询用户：&quot;</span>+user2);</span><br><span class="line">System.out.println(user == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现打印结果相同，说明存在一级缓存</p><p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"><span class="comment">// sqlSession.close();</span></span><br><span class="line"><span class="comment">//再次获取 SqlSession 对象</span></span><br><span class="line"><span class="comment">// sqlSession = factory.openSession();</span></span><br><span class="line">sqlSession.clearCache();<span class="comment">//此方法也可以清空缓存</span></span><br><span class="line">userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class="line">User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>清除缓存的测试，两种方法，一是把sqqlSession直接关闭重开，二是使用清空缓存方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.根据 id 查询用户</span></span><br><span class="line">User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"><span class="comment">//2.更新用户信息</span></span><br><span class="line">user1.setUsername(<span class="string">&quot;update user clear cache&quot;</span>);</span><br><span class="line">user1.setAddress(<span class="string">&quot;北京市海淀区&quot;</span>);</span><br><span class="line">userDao.updateUser(user1);</span><br><span class="line"><span class="comment">//3.再次查询 id 为 41 的用户</span></span><br><span class="line">User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当执行sqlSession.close()后，再次获取sqlSession并查询id=41的User对象时，又重新执行了sql </p><p>语句，从数据库进行了查询操作。更新方法提交事务，使缓存清空了。</p></blockquote><h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2.二级缓存"></a>2.二级缓存</h3><blockquote><p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个</p><p>SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p></blockquote><p>1.开启二级缓存–SqlMapConfig配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为</span><br><span class="line">false 代表不开启二级缓存。</span><br></pre></td></tr></table></figure><p>2.配置dao.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;com.itheima.dao.IUserDao&quot;&gt;</span><br><span class="line">&lt;!-- 开启二级缓存的支持 --&gt;</span><br><span class="line">&lt;cache&gt;&lt;&#x2F;cache&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>3.配置statement上的useCache属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据 id 查询 --&gt;</span> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">将 UserDao.xml 映射文件中的select标签中设置 useCache=”true”代表当前这个 statement 要使用</span><br><span class="line">二级缓存，如果不使用二级缓存可以设置为 false。</span><br></pre></td></tr></table></figure><blockquote><p>注意：针对每次查询都需要最新的数据 sql，要设置成 useCache=false，禁用二级缓存。</p></blockquote><p>4.二级缓存测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">IUserDao dao1 = sqlSession1.getMapper(IUserDao.class);</span><br><span class="line">User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line">sqlSession1.close();<span class="comment">//一级缓存消失</span></span><br><span class="line">SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">IUserDao dao2 = sqlSession2.getMapper(IUserDao.class);</span><br><span class="line">User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">sqlSession2.close();</span><br><span class="line">System.out.println(user1 == user2);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二</p><p>次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。</p></blockquote><blockquote><p>当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化</p><p>方式来保存对象。</p></blockquote><p>三、注解开发</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>:<span class="string">实现新增</span></span><br><span class="line"><span class="meta">@Update</span>:<span class="string">实现更新</span></span><br><span class="line"><span class="meta">@Delete</span>:<span class="string">实现删除</span></span><br><span class="line"><span class="meta">@Select</span>:<span class="string">实现查询</span></span><br><span class="line"><span class="meta">@Result</span>:<span class="string">实现结果集封装</span></span><br><span class="line"><span class="meta">@Results</span>:<span class="string">可以与@Result 一起使用，封装多个结果集</span></span><br><span class="line"><span class="meta">@ResultMap</span>:<span class="string">实现引用@Results 定义的封装</span></span><br><span class="line"><span class="meta">@One</span>:<span class="string">实现一对一结果集封装</span></span><br><span class="line"><span class="meta">@Many</span>:<span class="string">实现一对多结果集封装</span></span><br><span class="line"><span class="meta">@SelectProvider</span>: <span class="string">实现动态 SQL 映射</span></span><br><span class="line"><span class="meta">@CacheNamespace</span>:<span class="string">实现注解二级缓存的使用</span></span><br></pre></td></tr></table></figure><p>注解开启二级缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置二级缓存 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace(blocking=true)</span><span class="comment">//mybatis 基于注解方式实现配置二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">  <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多&quot;&gt;&lt;a href=&quot;#Mybatis连接池、事务深入、动态Sql、多表查询之一对多、多对多&quot; class=&quot;headerlink&quot; title=&quot;Mybatis连接池、事务深入、动态Sql、多表</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis学习之自定义框架</title>
    <link href="http://example.com/2020/12/20/Mybatis%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2020/12/20/Mybatis%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A1%86%E6%9E%B6/</id>
    <published>2020-12-20T00:49:23.000Z</published>
    <updated>2020-12-21T08:10:38.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis学习第一天"><a href="#Mybatis学习第一天" class="headerlink" title="Mybatis学习第一天"></a>Mybatis学习第一天</h1><p>Mybatis框架是一款解决数据持久化问题的框架，类似的有Hibernate、Spring Data。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身，</span><br><span class="line">而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。</span><br><span class="line">mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中</span><br><span class="line">sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并</span><br><span class="line">返回。</span><br><span class="line">采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我</span><br><span class="line">们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。</span><br><span class="line">为了我们能够更好掌握框架运行的内部过程，并且有更好的体验，下面我们将从自定义 Mybatis 框架开始来</span><br><span class="line">学习框架。此时我们将会体验框架从无到有的过程体验，也能够很好的综合前面阶段所学的基础。</span><br></pre></td></tr></table></figure><p>JDBC分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">            connection = DriverManager</span><br><span class="line">                    .getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&amp;useSSL=false&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;root&quot;</span>, <span class="string">&quot;rootroot&quot;</span>);</span><br><span class="line">            <span class="comment">//定义 sql 语句 ?表示占位符</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//获取预处理 statement</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的参数值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            <span class="comment">//向数据库发出 sql 执行查询，查询出结果集</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot; &quot;</span> + resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</p><p>2、Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。</p><p>3、使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。</p><p>4、对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便。</p></blockquote><h2 id="二、Mybatis快速入门"><a href="#二、Mybatis快速入门" class="headerlink" title="二、Mybatis快速入门"></a>二、Mybatis快速入门</h2><h3 id="1-创建maven工程"><a href="#1-创建maven工程" class="headerlink" title="1.创建maven工程"></a>1.创建maven工程</h3><h3 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2.导入依赖"></a>2.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写User实体类"><a href="#3-编写User实体类" class="headerlink" title="3.编写User实体类"></a>3.编写User实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-编写持久层接口IUserDao"><a href="#4-编写持久层接口IUserDao" class="headerlink" title="4.编写持久层接口IUserDao"></a>4.编写持久层接口IUserDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有User对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> User对象的list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-编写持久层接口的映射文件IUserDao-xml"><a href="#5-编写持久层接口的映射文件IUserDao-xml" class="headerlink" title="5.编写持久层接口的映射文件IUserDao.xml"></a>5.编写持久层接口的映射文件IUserDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>要求：<br>    创建位置：必须和持久层接口在相同的包中。<br>    名称：必须以持久层接口名称命名文件名，扩展名是.xml</p></blockquote><h3 id="6-编写SqlMapConfigure"><a href="#6-编写SqlMapConfigure" class="headerlink" title="6.编写SqlMapConfigure"></a>6.编写SqlMapConfigure</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置Mybatis环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置Mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接数据库的信息：用的是数据源(连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rootroot&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;aimu/maizhu/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-测试类"><a href="#7-测试类" class="headerlink" title="7.测试类"></a>7.测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfigure.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建 SqlSessionFactory 的构建者对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//3.使用构建者创建工厂对象 SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">//4.使用 SqlSessionFactory 生产 SqlSession 对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//5.使用 SqlSession 创建 dao 接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line">        <span class="comment">//6.使用代理对象执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml）</p><p>在IUserDao方法上添加注解并修改SqlMapConfigure.xml的mapper信息</p></blockquote><h2 id="三、自定义Mybatis框架"><a href="#三、自定义Mybatis框架" class="headerlink" title="三、自定义Mybatis框架"></a>三、自定义Mybatis框架</h2><p><img src="Mybatis-zidingyi.png" alt="Mybatis-zidingyi"></p><h3 id="1-创建工程，引入坐标"><a href="#1-创建工程，引入坐标" class="headerlink" title="1.创建工程，引入坐标"></a>1.创建工程，引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里说明一点就行dom4j的版本问题，在2.x版本中的root.selectNodes方法中，返回的是List<Node>是不需要的,1.6.1版本的返回List没有泛型，可以使用List<Element>，然后使用element类的方法是我们需要的。</p></blockquote><h3 id="2-引入工具类"><a href="#2-引入工具类" class="headerlink" title="2.引入工具类"></a>2.引入工具类</h3><p>(1)解析xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLConfigBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析主配置文件，把里面的内容填充到 DefaultSqlSession 所需要的地方</span></span><br><span class="line"><span class="comment">     * 使用的技术：</span></span><br><span class="line"><span class="comment">     * dom4j+xpath</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadConfiguration</span><span class="params">(DefaultSqlSession session, InputStream config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//定义封装连接信息的配置对象（mybatis 的配置对象）</span></span><br><span class="line">            Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="comment">//1.获取 SAXReader 对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取 Document 对象</span></span><br><span class="line">            Document document = reader.read(config);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.使用 xpath 中选择指定节点的方式，获取所有 property 节点</span></span><br><span class="line">            List&lt;Element&gt; propertyElements = root.selectNodes(<span class="string">&quot;//property&quot;</span>);</span><br><span class="line">            <span class="comment">//5.遍历节点</span></span><br><span class="line">            <span class="keyword">for</span> (Element propertyElement : propertyElements) &#123;</span><br><span class="line">                <span class="comment">//判断节点是连接数据库的哪部分信息</span></span><br><span class="line">                <span class="comment">//取出 name 属性的值</span></span><br><span class="line">                String name = propertyElement.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;driver&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示驱动</span></span><br><span class="line">                    <span class="comment">//获取 property 标签 value 属性的值</span></span><br><span class="line">                    String driver = propertyElement.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    cfg.setDriver(driver);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;url&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示连接字符串</span></span><br><span class="line">                    <span class="comment">//获取 property 标签 value 属性的值</span></span><br><span class="line">                    String url = propertyElement.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    cfg.setUrl(url);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示用户名</span></span><br><span class="line">                    <span class="comment">//获取 property 标签 value 属性的值</span></span><br><span class="line">                    String username = propertyElement.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    cfg.setUsername(username);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;password&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//表示密码</span></span><br><span class="line">                    <span class="comment">//获取 property 标签 value 属性的值</span></span><br><span class="line">                    String password = propertyElement.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    cfg.setPassword(password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出 mappers 中的所有 mapper 标签，判断他们使用了 resource 还是 class 属性</span></span><br><span class="line">            List&lt;Element&gt; mapperElements = root.selectNodes(<span class="string">&quot;//mappers/mapper&quot;</span>);</span><br><span class="line">            <span class="comment">//遍历集合</span></span><br><span class="line">            <span class="keyword">for</span> (Element mapperElement : mapperElements) &#123;</span><br><span class="line">                <span class="comment">//判断 mapperElement 使用的是哪个属性</span></span><br><span class="line">                Attribute attribute = mapperElement.attribute(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (attribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;使用的是 XML&quot;</span>);</span><br><span class="line">                    <span class="comment">//表示有 resource 属性，用的是 XML</span></span><br><span class="line">                    <span class="comment">//取出属性的值</span></span><br><span class="line">                    String mapperPath = attribute.getValue();<span class="comment">// 获 取 属 性 的 值&quot;com/itheima/dao/IUserDao.xml&quot;</span></span><br><span class="line">                    <span class="comment">//把映射配置文件的内容获取出来，封装成一个 map</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperConfiguration(mapperPath);</span><br><span class="line">                    <span class="comment">//给 configuration 中的 mappers 赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;使用的是注解&quot;</span>);</span><br><span class="line">                    <span class="comment">//表示没有 resource 属性，用的是注解</span></span><br><span class="line">                    <span class="comment">//获取 class 属性的值</span></span><br><span class="line">                    String daoClassPath = mapperElement.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                    <span class="comment">//根据 daoClassPath 获取封装的必要信息</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperAnnotation(daoClassPath);</span><br><span class="line">                    <span class="comment">//给 configuration 中的 mappers 赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把配置对象传递给 DefaultSqlSession</span></span><br><span class="line">            session.setCfg(cfg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                config.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，解析 XML，并且封装到 Map 中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperPath 映射配置文件的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map 中包含了获取的唯一标识（key 是由 dao 的全限定类名和方法名组成）</span></span><br><span class="line"><span class="comment">     * 以及执行所需的必要信息（value 是一个 Mapper 对象，里面存放的是执行的 SQL 语句和</span></span><br><span class="line"><span class="comment">    要封装的实体类全限定类名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Mapper&gt; <span class="title">loadMapperConfiguration</span><span class="params">(String mapperPath)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//定义返回值对象</span></span><br><span class="line">            Map&lt;String,Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String,Mapper&gt;();</span><br><span class="line">            <span class="comment">//1.根据路径获取字节输入流</span></span><br><span class="line">            in = Resources.getResourceAsStream(mapperPath);</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取 Document 对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(in);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.获取根节点的 namespace 属性取值</span></span><br><span class="line">            String namespace = root.attributeValue(<span class="string">&quot;namespace&quot;</span>);<span class="comment">//是组成 map 中 key 部分</span></span><br><span class="line">            <span class="comment">//5.获取所有的 select 节点</span></span><br><span class="line">            List&lt;Element&gt; selectElements = root.selectNodes(<span class="string">&quot;//select&quot;</span>);</span><br><span class="line">            <span class="comment">//6.遍历 select 节点集合</span></span><br><span class="line">            <span class="keyword">for</span>(Element selectElement : selectElements)&#123;</span><br><span class="line">                <span class="comment">//取出 id 属性的值 组成 map 中 key 的部分</span></span><br><span class="line">                String id = selectElement.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="comment">//取出 resultType 属性的值 组成 map 中 value 的部分</span></span><br><span class="line">                String resultType = selectElement.attributeValue(<span class="string">&quot;resultType&quot;</span>);</span><br><span class="line">                <span class="comment">//取出文本内容 组成 map 中 value 的部分</span></span><br><span class="line">                String queryString = selectElement.getText();</span><br><span class="line">                <span class="comment">//创建 Key</span></span><br><span class="line">                String key = namespace+<span class="string">&quot;.&quot;</span>+id;</span><br><span class="line">                <span class="comment">//创建 Value</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                mapper.setResultType(resultType);</span><br><span class="line">                <span class="comment">//把 key 和 value 存入 mappers 中</span></span><br><span class="line">                mappers.put(key,mapper);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mappers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，得到 dao 中所有被 select 注解标注的方法。</span></span><br><span class="line"><span class="comment">     * 根据方法名称和类名，以及方法上注解 value 属性的值，组成 Mapper 的必要信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClassPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Mapper&gt; <span class="title">loadMapperAnnotation</span><span class="params">(String daoClassPath)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//定义返回值对象</span></span><br><span class="line">        Map&lt;String,Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line">        <span class="comment">//1.得到 dao 接口的字节码对象</span></span><br><span class="line">        Class daoClass = Class.forName(daoClassPath);</span><br><span class="line">        <span class="comment">//2.得到 dao 接口中的方法数组</span></span><br><span class="line">        Method[] methods = daoClass.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历 Method 数组</span></span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="comment">//取出每一个方法，判断是否有 select 注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isAnnotated = method.isAnnotationPresent(Select.class);</span><br><span class="line">            <span class="keyword">if</span>(isAnnotated)&#123;</span><br><span class="line">                <span class="comment">//创建 Mapper 对象</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                <span class="comment">//取出注解的 value 属性值</span></span><br><span class="line">                Select selectAnno = method.getAnnotation(Select.class);</span><br><span class="line">                String queryString = selectAnno.value();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                <span class="comment">//获取当前方法的返回值，还要求必须带有泛型信息</span></span><br><span class="line">                Type type = method.getGenericReturnType();<span class="comment">//List&lt;User&gt;</span></span><br><span class="line">                <span class="comment">//判断 type 是不是参数化的类型</span></span><br><span class="line">                <span class="keyword">if</span>(type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                    <span class="comment">//强转</span></span><br><span class="line">                    ParameterizedType ptype = (ParameterizedType)type;</span><br><span class="line">                    <span class="comment">//得到参数化类型中的实际类型参数</span></span><br><span class="line">                    Type[] types = ptype.getActualTypeArguments();</span><br><span class="line">                    <span class="comment">//取出第一个</span></span><br><span class="line">                    Class domainClass = (Class)types[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//获取 domainClass 的类名</span></span><br><span class="line">                    String resultType = domainClass.getName();</span><br><span class="line">                    <span class="comment">//给 Mapper 赋值</span></span><br><span class="line">                    mapper.setResultType(resultType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//组装 key 的信息</span></span><br><span class="line">                <span class="comment">//获取方法的名称</span></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                String className = method.getDeclaringClass().getName();</span><br><span class="line">                String key = className+<span class="string">&quot;.&quot;</span>+methodName;</span><br><span class="line">                <span class="comment">//给 map 赋值</span></span><br><span class="line">                mappers.put(key,mapper);</span><br><span class="line">            &#125; &#125;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）执行sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(Mapper mapper, Connection conn)</span> </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.取出 mapper 中的数据</span></span><br><span class="line">            String queryString = mapper.getQueryString();<span class="comment">//select * from user</span></span><br><span class="line">            String resultType = mapper.getResultType();<span class="comment">//com.itheima.domain.User</span></span><br><span class="line">            Class domainClass = Class.forName(resultType);<span class="comment">//User.class</span></span><br><span class="line">            <span class="comment">//2.获取 PreparedStatement 对象</span></span><br><span class="line">            pstm = conn.prepareStatement(queryString);</span><br><span class="line">            <span class="comment">//3.执行 SQL 语句，获取结果集</span></span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="comment">//4.封装结果集</span></span><br><span class="line">            List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();<span class="comment">//定义返回值</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">//实例化要封装的实体类对象</span></span><br><span class="line">                E obj = (E) domainClass.newInstance();<span class="comment">//User 对象</span></span><br><span class="line">                <span class="comment">//取出结果集的元信息：ResultSetMetaData</span></span><br><span class="line">                ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">                <span class="comment">//取出总列数</span></span><br><span class="line">                <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">                <span class="comment">//遍历总列数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取每列的名称，列名的序号是从 1 开始的</span></span><br><span class="line">                    String columnName = rsmd.getColumnName(i);</span><br><span class="line">                    <span class="comment">//根据得到列名，获取每列的值</span></span><br><span class="line">                    Object columnValue = rs.getObject(columnName);</span><br><span class="line">                    <span class="comment">//给 obj 赋值：使用 Java 内省机制（借助 PropertyDescriptor 实现属性的封装）</span></span><br><span class="line">                    PropertyDescriptor pd = <span class="keyword">new</span></span><br><span class="line">                            PropertyDescriptor(columnName, domainClass);<span class="comment">//要求：实体类的属性和数据库表的列名保持一种</span></span><br><span class="line">                    <span class="comment">//获取它的写入方法</span></span><br><span class="line">                    Method writeMethod = pd.getWriteMethod();<span class="comment">//setUsername(Stringusername);</span></span><br><span class="line">                    <span class="comment">//把获取的列的值，给对象赋值</span></span><br><span class="line">                    writeMethod.invoke(obj, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把赋好值的对象加入到集合中</span></span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(PreparedStatement pstm, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pstm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstm.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）数据源的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(cfg.getDriver());</span><br><span class="line">            Connection conn =</span><br><span class="line">                    DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-SqlMapConfig配置"><a href="#3-SqlMapConfig配置" class="headerlink" title="3.SqlMapConfig配置"></a>3.SqlMapConfig配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?characterEncoding=utf8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rootroot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;aimu/maizhu/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-编写读取配置文件类"><a href="#4-编写读取配置文件类" class="headerlink" title="4.编写读取配置文件类"></a>4.编写读取配置文件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于加载 xml 文件，并且得到一个流对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xmlPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * 在实际开发中读取配置文件:</span></span><br><span class="line"><span class="comment">     * 第一：使用类加载器。但是有要求：a 文件不能过大。 b 文件必须在类路径下(classpath)</span></span><br><span class="line"><span class="comment">     * 第二：使用 ServletContext 的 getRealPath()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String xmlPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Resources.class.getClassLoader().getResourceAsStream(xmlPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-编写Mapper类"><a href="#5-编写Mapper类" class="headerlink" title="5.编写Mapper类"></a>5.编写Mapper类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String queryString;<span class="comment">//sql</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;<span class="comment">//结果类型的全限定类名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-编写Configuration配置类"><a href="#6-编写Configuration配置类" class="headerlink" title="6.编写Configuration配置类"></a>6.编写Configuration配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String driver;<span class="comment">//驱动</span></span><br><span class="line">    <span class="comment">//map 集合 Map&lt;唯一标识，Mapper&gt; 用于保存映射文件中的 sql 标识及 sql 语句</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMappers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMappers</span><span class="params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers.putAll(mappers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里说明一下mappers的set方法 this.mappers.putAll(mappers);不可以用this.mappers=mappers，因为如果有多个mappers会覆盖掉前面的mappers，用putAll方法会将所有的mappers放到map里。</p></blockquote><h3 id="7-编写User实体类"><a href="#7-编写User实体类" class="headerlink" title="7.编写User实体类"></a>7.编写User实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-持久层接口与xml"><a href="#8-持久层接口与xml" class="headerlink" title="8.持久层接口与xml"></a>8.持久层接口与xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;aimu.maizhu.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;aimu.maizhu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-编写构建者类"><a href="#9-编写构建者类" class="headerlink" title="9.编写构建者类"></a>9.编写构建者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的流，实现对 SqlSessionFactory 的创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 它就是 SqlMapConfig.xml 的配置以及里面包含的 IUserDao.xml 的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returnSqlSessionFactory</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        DefaultSqlSessionFactory factory = <span class="keyword">new</span> DefaultSqlSessionFactory();</span><br><span class="line"><span class="comment">//给 factory 中 config 赋值</span></span><br><span class="line">        factory.setConfig(in);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-编写SqlSessionFactory接口与实现类"><a href="#10-编写SqlSessionFactory接口与实现类" class="headerlink" title="10.编写SqlSessionFactory接口与实现类"></a>10.编写SqlSessionFactory接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个新的 SqlSession 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream config = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultSqlSession session = <span class="keyword">new</span> DefaultSqlSession();</span><br><span class="line"><span class="comment">//调用工具类解析 xml 文件</span></span><br><span class="line">        XMLConfigBuilder.loadConfiguration(session, config);</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-编写SqlSession接口与实现类"><a href="#11-编写SqlSession接口与实现类" class="headerlink" title="11.编写SqlSession接口与实现类"></a>11.编写SqlSession接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Dao 接口的代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoClass)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line">    <span class="comment">//核心配置对象</span></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCfg</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用 DataSourceUtils 工具类获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DataSourcesUtil.getConnection(cfg);</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态代理：</span></span><br><span class="line"><span class="comment">     * 涉及的类：Proxy</span></span><br><span class="line"><span class="comment">     * 使用的方法：newProxyInstance</span></span><br><span class="line"><span class="comment">     * 方法的参数：</span></span><br><span class="line"><span class="comment">     * ClassLoader：和被代理对象使用相同的类加载器,通常都是固定的</span></span><br><span class="line"><span class="comment">     * Class[]：代理对象和被代理对象要求有相同的行为。（具有相同的方法）</span></span><br><span class="line"><span class="comment">     * InvocationHandler：如何代理。需要我们自己提供的增强部分的代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; daoClass)</span> </span>&#123;</span><br><span class="line">        conn = getConn();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        T daoProxy = (T) Proxy.newProxyInstance(daoClass.getClassLoader(), <span class="keyword">new</span></span><br><span class="line">                Class[]&#123;daoClass&#125;, <span class="keyword">new</span> MapperProxyFactory(cfg.getMappers(), conn));</span><br><span class="line">        <span class="keyword">return</span> daoProxy;</span><br><span class="line">    &#125;<span class="comment">//释放资源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(conn);</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        Mapper mapper = cfg.getMappers().get(statement);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-编写用于创建Dao接口代理对象的类"><a href="#12-编写用于创建Dao接口代理对象的类" class="headerlink" title="12.编写用于创建Dao接口代理对象的类"></a>12.编写用于创建Dao接口代理对象的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxyFactory</span><span class="params">(Map&lt;String, Mapper&gt; mappers, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers = mappers;</span><br><span class="line">        <span class="keyword">this</span>.conn = conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对当前正在执行的方法进行增强</span></span><br><span class="line"><span class="comment">     * 取出当前执行的方法名称</span></span><br><span class="line"><span class="comment">     * 取出当前执行的方法所在类</span></span><br><span class="line"><span class="comment">     * 拼接成 key</span></span><br><span class="line"><span class="comment">     * 去 Map 中获取 Value（Mapper)</span></span><br><span class="line"><span class="comment">     * 使用工具类 Executor 的 selectList 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1.取出方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">//2.取出方法所在类名</span></span><br><span class="line">        String className = method.getDeclaringClass().getName();</span><br><span class="line">        <span class="comment">//3.拼接成 Key</span></span><br><span class="line">        String key = className + <span class="string">&quot;.&quot;</span> + methodName;</span><br><span class="line">        <span class="comment">//4.使用 key 取出 mapper</span></span><br><span class="line">        Mapper mapper = mappers.get(key);</span><br><span class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;传入的参数有误，无法获取执行的必要条件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.创建 Executor 对象</span></span><br><span class="line">        Executor executor = <span class="keyword">new</span> Executor();</span><br><span class="line">        <span class="keyword">return</span> executor.selectList(mapper, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-修改为注解配置方式"><a href="#13-修改为注解配置方式" class="headerlink" title="13.修改为注解配置方式"></a>13.修改为注解配置方式</h3><p>(1)Select注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)IUserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)SqlMapConfig配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?characterEncoding=utf8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rootroot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置注解类地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;aimu.maizhu.dao.IUserDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis学习第一天&quot;&gt;&lt;a href=&quot;#Mybatis学习第一天&quot; class=&quot;headerlink&quot; title=&quot;Mybatis学习第一天&quot;&gt;&lt;/a&gt;Mybatis学习第一天&lt;/h1&gt;&lt;p&gt;Mybatis框架是一款解决数据持久化问题的框架，类似的有H</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql集群搭建入门学习</title>
    <link href="http://example.com/2020/12/07/Mysql%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/07/Mysql%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-07T04:36:06.000Z</published>
    <updated>2020-12-07T14:06:28.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql集群搭建"><a href="#Mysql集群搭建" class="headerlink" title="Mysql集群搭建"></a>Mysql集群搭建</h1><h2 id="一、系统框架存在的问题"><a href="#一、系统框架存在的问题" class="headerlink" title="一、系统框架存在的问题"></a>一、系统框架存在的问题</h2><p>我们的系统框架中，DBserver我们只使用了单节点服务，而面对高并发、海量数据的时候显然存在很严重的问题，所以我们要实现Mysql集群的搭建</p><h2 id="二、Mysql集群搭建方案"><a href="#二、Mysql集群搭建方案" class="headerlink" title="二、Mysql集群搭建方案"></a>二、Mysql集群搭建方案</h2><h3 id="1-读写分离"><a href="#1-读写分离" class="headerlink" title="1.读写分离"></a>1.读写分离</h3><p>数据库要求一般“读多写少”，所以一个思路就是：一个主库负责写，成为写库；其他数据库负责读，成为读库。</p><p>实现的要求：</p><ol><li>读库写库数据必须一致</li><li>读数据必须到读库</li><li>写数据必须到写库</li></ol><p><img src="mysql01.png" alt="Mysql01"></p><p>图中的框架就是读写分离框架，该框架存在2个问题</p><ul><li>应用程序需要连接多个数据库，增加开发难度<ul><li>可以通过中间件来解决（Mycat）</li><li>如果在程序内部实现，可以使用Spring的AOP技术</li></ul></li></ul><p><img src="Mysql-SpringAOP.png" alt="Mysql-SpringAOP"></p><ul><li>主从之间的同步是异步实现的，所以是弱一致性<ul><li>可能会出现数据写入写库中，读取时读不到数据，或者数据丢失等情况</li><li>采用PXC集群解决（强一致性，不分主从）</li></ul></li></ul><h3 id="2-中间件"><a href="#2-中间件" class="headerlink" title="2.中间件"></a>2.中间件</h3><p>上面框架的问题之一可以通过中间件来解决。</p><p><img src="Mysql-Mycat.png" alt="Mysql-Mycat"></p><p>从框架中可以看出</p><ul><li>应用程序只需连接到中间件即可</li><li>应用程序无需区分读写操作，对中间件读写操作即可</li><li>中间件区分读写操作，读操作到从节点，写操作到主节点</li></ul><p>该框架也存在问题，中间件的性能成为了瓶颈，可以改造成下面的架构：</p><p><img src="Mysql-Mycat02.png" alt="Mysql-Mycat02"></p><p>这样中间件性能就不会成为瓶颈，但是应用程序又要连接多个中间件，开发难度还是增加了</p><h3 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3.负载均衡"></a>3.负载均衡</h3><p>为了解决以上问题，我们可以通过haproxy代理解决，由代理完成负载均衡功能。</p><p><img src="Mysql-haproxy.png" alt="Mysql-haproxy"></p><p>至此，读写分离的高可用框架搭建成功。</p><h3 id="4-PXC集群架构"><a href="#4-PXC集群架构" class="headerlink" title="4.PXC集群架构"></a>4.PXC集群架构</h3><p>在前面的中间件只解决了主从分离的开发复杂问题，而并不能解决弱一致性问题，而PXC就是为了解决弱一致性问题的架构，它可以保证数据在任何一个节点写入的同时可以同步到其他节点，无延迟。</p><p><img src="Mysql-PXC.png" alt="Mysql-PXC"></p><h3 id="5-混合框架"><a href="#5-混合框架" class="headerlink" title="5.混合框架"></a>5.混合框架</h3><p>在前面的PXC架构中，虽然可以实现了事务的强一致性，但是它是通过牺牲了性能换来的一致性，如果在某些业务场景下，如果没有强一致性的需求，那么使用PXC就不合适了。所以，在我们的系统架构中，需要将这两种方式综合起来，这样才是一个较为完善的架构。</p><p><img src="Mysql-ending.png" alt="Mysql-ending"></p><h2 id="三、Mysql主从复制架构搭建"><a href="#三、Mysql主从复制架构搭建" class="headerlink" title="三、Mysql主从复制架构搭建"></a>三、Mysql主从复制架构搭建</h2><h3 id="1-主从复制原理：（master称为主，slave称为从）"><a href="#1-主从复制原理：（master称为主，slave称为从）" class="headerlink" title="1.主从复制原理：（master称为主，slave称为从）"></a>1.主从复制原理：（master称为主，slave称为从）</h3><ul><li>master将数据改变记录到二进制日志文件中，即配置文件log-bin指定的文件</li><li>slave将master的二进制日志文件拷贝到它的中继日志中</li><li>slave重做中继日志中的事件，将改变反映到自己的数据库中（数据重演）</li></ul><blockquote><p>主从配置需要注意的地方</p></blockquote><ul><li>主DBserver与从DBserver版本一致</li><li>主DBserver与从DBserver数据一致</li><li>主DBserver与从DBserver的server_id必须唯一</li></ul><h3 id="2-主库配置文件my-conf"><a href="#2-主库配置文件my-conf" class="headerlink" title="2.主库配置文件my.conf"></a>2.主库配置文件my.conf</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启主从复制，主库的配置 </span></span><br><span class="line"><span class="meta">log-bin</span> = <span class="string">mysql-bin </span></span><br><span class="line"><span class="comment">#指定主库serverid </span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1 </span></span><br><span class="line"><span class="comment">#指定同步的数据库，如果不指定则同步全部数据库 </span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">my_test</span></span><br></pre></td></tr></table></figure><h3 id="3-主库创建同步用户"><a href="#3-主库创建同步用户" class="headerlink" title="3.主库创建同步用户"></a>3.主库创建同步用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#授权用户slave01使用123456密码登录mysql </span><br><span class="line">grant replication slave on *.* to &#39;slave01&#39;@&#39;127.0.0.1&#39; identified by &#39;123456&#39;; </span><br><span class="line">#刷新配置 </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="4-从库配置"><a href="#4-从库配置" class="headerlink" title="4.从库配置"></a>4.从库配置</h3><p>my.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定serverid，只要不重复即可，从库也只有这一个配置，其他都在SQL语句中操作 </span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><p>sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO </span><br><span class="line">master_host&#x3D;&#39;127.0.0.1&#39;, #主库地址</span><br><span class="line">master_user&#x3D;&#39;slave01&#39;, </span><br><span class="line">master_password&#x3D;&#39;123456&#39;, </span><br><span class="line">master_port&#x3D;3306, </span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000006&#39;, #根据show master status查看</span><br><span class="line">master_log_pos&#x3D;1120; #根据show master status查看</span><br><span class="line">#启动slave同步 </span><br><span class="line">START SLAVE; </span><br><span class="line">#查看同步状态 </span><br><span class="line">SHOW SLAVE STATUS;</span><br></pre></td></tr></table></figure><h3 id="5-搭建主库"><a href="#5-搭建主库" class="headerlink" title="5.搭建主库"></a>5.搭建主库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录 </span></span><br><span class="line">mkdir /data/mysql/master01</span><br><span class="line">cd /data/mysql/master01 </span><br><span class="line">mkdir conf data </span><br><span class="line">chmod 777 * -R</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件 </span></span><br><span class="line">cd /data/mysql/master01/conf </span><br><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输入如下内容 </span></span><br><span class="line">[mysqld] </span><br><span class="line">log-bin=mysql-bin #开启二进制日志 </span><br><span class="line">server-id=1 #服务id，不可重复</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name percona-master01 -v /data/mysql/master01/data:/var/lib/mysql -v /data/mysql/master01/conf:/etc/my.cnf.d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.7.23</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start percona-master01 &amp;&amp; docker logs -f percona-master01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建同步账户以及授权 </span></span><br><span class="line">create user &#x27;itcast&#x27;@&#x27;%&#x27; identified by &#x27;itcast&#x27;; </span><br><span class="line">grant replication slave on *.* to &#x27;itcast&#x27;@&#x27;%&#x27;; </span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看master状态 </span></span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure><h3 id="6-搭建从库"><a href="#6-搭建从库" class="headerlink" title="6.搭建从库"></a>6.搭建从库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录 </span></span><br><span class="line">mkdir /data/mysql//slave01</span><br><span class="line">cd /data/mysql//slave01</span><br><span class="line">mkdir conf data </span><br><span class="line">chmod 777 * -R</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件 </span></span><br><span class="line">cd /data/mysql//slave01/conf </span><br><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输入如下内容 </span></span><br><span class="line">[mysqld] </span><br><span class="line">server-id=2 #服务id，不可重复</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name percona-/slave01 -v /data/mysql//slave01/data:/var/lib/mysql -v /data/mysql//slave01/conf:/etc/my.cnf.d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.7.23</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start percona-slave01 &amp;&amp; docker logs -f percona-slave01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置master相关信息 </span></span><br><span class="line">CHANGE MASTER TO </span><br><span class="line">master_host=&#x27;10.211.55.7&#x27;, </span><br><span class="line">master_user=&#x27;itcast&#x27;, </span><br><span class="line">master_password=&#x27;itcast&#x27;, </span><br><span class="line">master_port=3306, </span><br><span class="line">master_log_file=&#x27;mysql-bin.000002&#x27;, </span><br><span class="line">master_log_pos=648;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动同步 </span></span><br><span class="line">start slave; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看master状态 </span></span><br><span class="line">show slave status;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">看到以下俩个参数为yes表示创建成功</span></span><br><span class="line">Slave_IO_Running: Yes </span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><h3 id="7-主从复制模式"><a href="#7-主从复制模式" class="headerlink" title="7.主从复制模式"></a>7.主从复制模式</h3><p>在MySQL中提供了有3种模式，基于SQL语句的复制(statement-based replication, SBR)，基于行的复制(row-based replication, RBR)，混合模式复制(mixed-based replication, MBR)。对应的，binlog的格式也有三种：STATEMENT，ROW，MIXED。</p><blockquote><p>STATEMENT模式（SBR）</p></blockquote><p>每一条会修改数据的sql语句会记录到binlog中。</p><ul><li>优点是并不需要记录每一条sql语句和每一行的数据变化，减少了binlog日志量，节约IO，提高性能。</li><li>缺点是在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defifined functions(udf)等会出现问题)（最简单的例子是date时间函数，创建出来的时间会不同）</li></ul><blockquote><p>ROW模式（RBR）</p></blockquote><p>不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了，修改成什么样了。而且不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。缺点是会产生大量的日志，尤其是alter table的时候会让日志暴涨。</p><blockquote><p>MIXED模式（MBR）</p></blockquote><p>以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。</p><p>建议使用MIXED模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改主库的配置 </span></span><br><span class="line">binlog_format=MIXED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重启 </span></span><br><span class="line">docker restart percona-master01 &amp;&amp; docker logs -f percona-master01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看二进制日志相关的配置项 </span></span><br><span class="line">show global variables like &#x27;binlog%&#x27;;#发现binlog_format已经被改为MIXED模式了</span><br></pre></td></tr></table></figure><h2 id="四、Mycat中间件"><a href="#四、Mycat中间件" class="headerlink" title="四、Mycat中间件"></a>四、Mycat中间件</h2><h3 id="1-读写分离（一个主从库）"><a href="#1-读写分离（一个主从库）" class="headerlink" title="1.读写分离（一个主从库）"></a>1.读写分离（一个主从库）</h3><p>server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:server <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;server.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">system</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subqueryRelationshipCheck&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里是设置的itcast用户和虚拟逻辑库--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;itcast&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>itcast123<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">user</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置数据表--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;itcast&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_ad&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">schema</span>&gt;</span> <span class="comment">&lt;!--配置分片关系--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置连接信息--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W1R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>balance属性说明：</p><p>负载均衡类型，目前的取值有3 种：</p><ol><li><p>balance=”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上。</p></li><li><p>balance=”1”，全部的readHost 与stand by writeHost 参与select 语句的负载均衡，简单的说，当双 主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1 与M2 互为主备)，正常情况下，M2,S1,S2 都参与select 语句的负载均衡。</p></li><li><p>balance=”2”，所有读操作都随机的在writeHost、readhost 上分发。</p></li><li><p>balance=”3”，所有读请求随机的分发到wiriterHost 对应的readhost 执行，writerHost 不负担读压 力，注意balance=3 只在1.4 及其以后版本有，1.3 没有。</p></li></ol></blockquote><p>rule.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>连接数据库测试。。。</p><h3 id="2-数据分片（多个主从库集群）"><a href="#2-数据分片（多个主从库集群）" class="headerlink" title="2.数据分片（多个主从库集群）"></a>2.数据分片（多个主从库集群）</h3><p>主从库创建步骤略。。按主从复制的操作就行，只不过多创建几个集群。</p><blockquote><p>有一点要注意：master01与master02的server_id可以一样，但在一个主从库中不能相同，比如master01与slave01中的server_id</p></blockquote><p>配置schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置数据表--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;itcast&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_ad&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">schema</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置分片关系--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置连接信息--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W1R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3316&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W2R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:3317&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rule.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!--cluster有两个所以设置为2--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>连接测试。。。</p><h3 id="3-Mycat集群"><a href="#3-Mycat集群" class="headerlink" title="3.Mycat集群"></a>3.Mycat集群</h3><p>Mycat02配置修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cp mycat mycat2 -R </span><br><span class="line">vim wrapper.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">设置jmx端口 </span></span><br><span class="line">wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=1985 </span><br><span class="line"></span><br><span class="line">vim server.xml </span><br><span class="line"><span class="meta">#</span><span class="bash">设置服务端口以及管理端口 </span></span><br><span class="line">&lt;property name=&quot;serverPort&quot;&gt;8067&lt;/property&gt; </span><br><span class="line">&lt;property name=&quot;managerPort&quot;&gt;9067&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="五、负载均衡"><a href="#五、负载均衡" class="headerlink" title="五、负载均衡"></a>五、负载均衡</h2><h3 id="1-简介–自己百度"><a href="#1-简介–自己百度" class="headerlink" title="1.简介–自己百度"></a>1.简介–自己百度</h3><p>在前面架构中，虽然对mycat做了集群，保障了mycat的可靠性，但是，应用程序需要连接到多个mycat，显然不是很友好的，也就是说缺少负载均衡的组件，接下来我们来了解下HAProxy。</p><p>官网：<a href="http://www.haproxy.org/">http://www.haproxy.org/</a></p><h3 id="2-部署安装"><a href="#2-部署安装" class="headerlink" title="2.部署安装"></a>2.部署安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull haproxy:1.9.3 </span><br><span class="line"><span class="meta">#</span><span class="bash">创建目录，用于存放配置文件 </span></span><br><span class="line">mkdir /haoke/haproxy </span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name haproxy --net host -v /haoke/haproxy:/usr/local/etc/haproxy haproxy:1.9.3</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建文件 </span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/haoke/haproxy/haproxy.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输入如下内容</span></span><br><span class="line"><span class="attr">global</span></span><br><span class="line"><span class="attr">log</span> <span class="string">127.0.0.1 local2 </span></span><br><span class="line"><span class="attr">maxconn</span> <span class="string">4000 </span></span><br><span class="line"><span class="attr">daemon</span> <span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">defaults</span> <span class="string"></span></span><br><span class="line"><span class="attr">mode</span> <span class="string">http </span></span><br><span class="line"><span class="attr">log</span> <span class="string">global </span></span><br><span class="line"><span class="attr">option</span> <span class="string">httplog </span></span><br><span class="line"><span class="attr">option</span> <span class="string">dontlognull </span></span><br><span class="line"><span class="attr">option</span> <span class="string">http-server-close </span></span><br><span class="line"><span class="attr">option</span> <span class="string">forwardfor except 127.0.0.0/8 </span></span><br><span class="line"><span class="attr">option</span> <span class="string">redispatch </span></span><br><span class="line"><span class="attr">retries</span> <span class="string">3 </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">http-request 10s </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">queue 1m </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">connect 10s </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">client 1m </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">server 1m </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">http-keep-alive 10s </span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">check 10s </span></span><br><span class="line"><span class="attr">maxconn</span> <span class="string">3000 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">listen</span> <span class="string">admin_stats </span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0:4001 </span></span><br><span class="line"><span class="attr">mode</span> <span class="string">http </span></span><br><span class="line"><span class="attr">stats</span> <span class="string">uri /dbs </span></span><br><span class="line"><span class="attr">stats</span> <span class="string">realm Global\ statistics </span></span><br><span class="line"><span class="attr">stats</span> <span class="string">auth admin:admin123 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">listen</span> <span class="string">proxy-mysql </span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0:4002 </span></span><br><span class="line"><span class="attr">mode</span> <span class="string">tcp balance roundrobin</span></span><br><span class="line"><span class="attr">option</span> <span class="string">tcplog </span></span><br><span class="line"><span class="comment">#代理mycat服务 </span></span><br><span class="line"><span class="attr">server</span> <span class="string">mycat_1 192.168.1.18:8066 check port 8066 maxconn 2000 </span></span><br><span class="line"><span class="attr">server</span> <span class="string">mycat_2 192.168.1.18:8067 check port 8067 maxconn 2000</span></span><br></pre></td></tr></table></figure><p>启动haproxy连接测试。。。通过web界面进行测试：<a href="http://192.168.1.18:4001/dbs">http://192.168.1.18:4001/dbs</a></p><p><img src="Mysql-haproxy-test.png" alt="Mysql-haproxy-test"></p><h2 id="六、PXC集群"><a href="#六、PXC集群" class="headerlink" title="六、PXC集群"></a>六、PXC集群</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>Percona XtraDB Cluster（简称PXC）是针对MySQL用户的高可用性和扩展性解决方案，基于Percona Server 。其包括了Write Set REPlication补丁，使用Galera 2.0库，这是一个针对事务性应用程序的同步多主机复制插件。</p><p>Percona Server是MySQL的改进版本，使用 XtraDB 存储引擎，在功能和性能上较 MySQL 有着很显著的提升，如提升了在高负载情况下的 InnoDB 的性能，为 DBA 提供了一些非常有用的性能诊断工具，另外有更多的参数和命令来控制服务器行为。</p><p>官网：<a href="https://www.percona.com/software/mysql-database/percona-xtradb-cluster">https://www.percona.com/software/mysql-database/percona-xtradb-cluster</a></p><h3 id="2-架构"><a href="#2-架构" class="headerlink" title="2.架构"></a>2.架构</h3><p><img src="Mysql-PXC.png" alt="Mysql-PXC"></p><h3 id="3-部署安装"><a href="#3-部署安装" class="headerlink" title="3.部署安装"></a>3.部署安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据卷（存储路径：/var/lib/docker/volumes）</span></span><br><span class="line">docker volume create v1</span><br><span class="line">docker volume create v2</span><br><span class="line">docker volume create v3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull percona/percona-xtradb-cluster:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重命名 </span></span><br><span class="line">docker tag percona/percona-xtradb-cluster:5.7 pxc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建网络 </span></span><br><span class="line">docker network create --subnet=172.30.0.0/24 pxc-network </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一节点 </span></span><br><span class="line">docker create -p 13306:3306 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node1 --net=pxc-network --ip=172.30.0.2 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">第二节点（增加了CLUSTER_JOIN参数） </span></span><br><span class="line">docker create -p 13307:3306 -v v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node2 -e CLUSTER_JOIN=pxc_node1 --net=pxc-network -- ip=172.30.0.3 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">第三节点（增加了CLUSTER_JOIN参数） </span></span><br><span class="line">docker create -p 13308:3306 -v v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node3 -e CLUSTER_JOIN=pxc_node1 --net=pxc-network -- ip=172.30.0.4 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">查看集群节点 </span></span><br><span class="line">show status like &#x27;wsrep_cluster%&#x27;; </span><br></pre></td></tr></table></figure><h3 id="4-集群说明"><a href="#4-集群说明" class="headerlink" title="4.集群说明"></a>4.集群说明</h3><ul><li>尽可能的控制PXC的规模，节点越多，数据同步越慢</li><li>PXC集群的硬件设备性能要一致，否则配置低的节点会拖慢速度</li><li>只支持innoDB引擎，不支持其它存储引擎</li></ul><h3 id="5-PXC集群与Replication的区别"><a href="#5-PXC集群与Replication的区别" class="headerlink" title="5.PXC集群与Replication的区别"></a>5.PXC集群与Replication的区别</h3><ul><li>PXC集群方案所有节点都是可读可写的，Replication从节点不能写入，因为主从同步是单向的，无法从slave节点向master点同步。</li><li>PXC同步机制是同步进行的，这也是它能保证数据强一致性的根本原因，Replication同步机制是异步进行的，它如果从节点停止同步，依然可以向主节点插入数据，正确返回，造成数据主从数据的不一致性。</li><li>PXC是用牺牲性能保证数据的一致性，Replication在性能上是高于PXC的。所以两者用途也不一致。PXC是用于重要信息的存储，例如：订单、用户信息等。Replication用于一般信息的存储，能够容忍数据丢失，例如：购物车，用户行为日志等。</li></ul><h2 id="七、综合应用"><a href="#七、综合应用" class="headerlink" title="七、综合应用"></a>七、综合应用</h2><h3 id="1-架构"><a href="#1-架构" class="headerlink" title="1.架构"></a>1.架构</h3><p><img src="Mysql-application.png" alt="Mysql-application"></p><p>说明：</p><ul><li>HAProxy作为负载均衡器</li><li>部署了2个Mycat节点作为数据库中间件</li><li>部署了2个PXC集群节点，作为2个Mycat分片，每个PXC集群中有2个节点，作为数据的同步存储</li><li>部署了1个主从复制集群</li><li>房源数据保存到PXC分片中，其余数据保存到主从架构中</li></ul><h3 id="2-部署PXC集群"><a href="#2-部署PXC集群" class="headerlink" title="2.部署PXC集群"></a>2.部署PXC集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据卷（存储路径：/var/lib/docker/volumes）</span></span><br><span class="line">docker volume create haoke-v1</span><br><span class="line">docker volume create haoke-v2</span><br><span class="line">docker volume create haoke-v3</span><br><span class="line">docker volume create haoke-v4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull percona/percona-xtradb-cluster:5.7 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建网络 </span></span><br><span class="line">docker network create --subnet=172.30.0.0/24 pxc-network</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">集群1，第一节点 </span></span><br><span class="line">docker create -p 13306:3306 -v haoke-v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node1 --net=pxc-network --ip=172.30.0.2 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">第二节点（增加了CLUSTER_JOIN参数） </span></span><br><span class="line">docker create -p 13307:3306 -v haoke-v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node2 -e CLUSTER_JOIN=pxc_node1 --net=pxc-network -- ip=172.30.0.3 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">集群2 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一节点 </span></span><br><span class="line">docker create -p 13308:3306 -v haoke-v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node3 --net=pxc-network --ip=172.30.0.4 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">第二节点（增加了CLUSTER_JOIN参数） </span></span><br><span class="line">docker create -p 13309:3306 -v haoke-v4:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=pxc --name=pxc_node4 -e CLUSTER_JOIN=pxc_node3 --net=pxc-network -- ip=172.30.0.5 pxc </span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start pxc_node1 &amp;&amp; docker logs -f pxc_node1 </span><br><span class="line">docker start pxc_node2 &amp;&amp; docker logs -f pxc_node2 </span><br><span class="line">docker start pxc_node3 &amp;&amp; docker logs -f pxc_node3 </span><br><span class="line">docker start pxc_node4 &amp;&amp; docker logs -f pxc_node4</span><br></pre></td></tr></table></figure><h3 id="3-部署主从复制集群"><a href="#3-部署主从复制集群" class="headerlink" title="3.部署主从复制集群"></a>3.部署主从复制集群</h3><p>master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录 </span></span><br><span class="line">mkdir /data/mysql/haoke/master01 -p </span><br><span class="line">cd /data/mysql/haoke/master01 </span><br><span class="line">mkdir conf data </span><br><span class="line">chmod 777 * -R </span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件 </span></span><br><span class="line">cd /data/mysql/haoke/master01/conf </span><br><span class="line">vim my.cnf </span><br><span class="line"><span class="meta">#</span><span class="bash">输入如下内容 </span></span><br><span class="line">[mysqld] </span><br><span class="line">log-bin=mysql-bin #开启二进制日志 </span><br><span class="line">server-id=1 #服务id，不可重复  </span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name percona-haoke-master01 -v /data/mysql/haoke/master01/data:/var/lib/mysql -v /data/mysql/haoke/master01/conf:/etc/my.cnf.d -p 23306:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.7.23 </span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start percona-haoke-master01 &amp;&amp; docker logs -f percona-haoke-master01 </span><br><span class="line"><span class="meta">#</span><span class="bash">创建同步账户以及授权 </span></span><br><span class="line">create user &#x27;itcast&#x27;@&#x27;%&#x27; identified by &#x27;itcast&#x27;; </span><br><span class="line">grant replication slave on *.* to &#x27;itcast&#x27;@&#x27;%&#x27;; </span><br><span class="line">flush privileges; </span><br><span class="line"><span class="meta">#</span><span class="bash">查看master状态 </span></span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>slave</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建目录 </span></span><br><span class="line">mkdir /data/mysql/haoke/slave01 -p </span><br><span class="line">cd /data/mysql/haoke/slave01 </span><br><span class="line">mkdir conf data </span><br><span class="line">chmod 777 * -R </span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件 </span></span><br><span class="line">cd /data/mysql/haoke/slave01/conf </span><br><span class="line">vim my.cnf </span><br><span class="line"><span class="meta">#</span><span class="bash">输入如下内容 </span></span><br><span class="line">[mysqld] server-id=2 #服务id，不可重复  </span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name percona-haoke-slave01 -v /data/mysql/haoke/slave01/data:/var/lib/mysql -v /data/mysql/haoke/slave01/conf:/etc/my.cnf.d -p 23307:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.7.23 </span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start percona-haoke-slave01 &amp;&amp; docker logs -f percona-haoke-slave01 </span><br><span class="line"><span class="meta">#</span><span class="bash">设置master相关信息 </span></span><br><span class="line">CHANGE MASTER TO </span><br><span class="line">master_host=&#x27;192.168.1.18&#x27;, </span><br><span class="line">master_user=&#x27;itcast&#x27;, </span><br><span class="line">master_password=&#x27;itcast&#x27;, </span><br><span class="line">master_port=23306, </span><br><span class="line">master_log_file=&#x27;mysql-bin.000002&#x27;, </span><br><span class="line">master_log_pos=648; </span><br><span class="line"><span class="meta">#</span><span class="bash">启动同步 </span></span><br><span class="line">start slave;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看master状态 </span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><h3 id="4-部署Mycat"><a href="#4-部署Mycat" class="headerlink" title="4.部署Mycat"></a>4.部署Mycat</h3><p>配置节点一节点二，其中schema.xml的3个cluster配置注意一下。</p><p>server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:server <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;server.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">system</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subqueryRelationshipCheck&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这里是设置的itcast用户和虚拟逻辑库--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;itcast&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>itcast123<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">user</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置数据表--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;haoke&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_house_resources&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_ad&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">schema</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置分片关系--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;haoke&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;haoke&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;cluster3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;haoke&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--配置连接信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;2&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:13306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W1R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:13307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:13308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W2R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:13309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;cluster3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">writeType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;W3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:23306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;W3R1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.18:23307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意到cluster1与2的balance值为2，表示所有读操作都随机的在writeHost、readhost 上分发。体现了PXC集群方式，而cluster3的balance值为3，体现了读写分离集群方式</p></blockquote><p>rule.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置端口并启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim wrapper.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">设置jmx端口 </span></span><br><span class="line">wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=11985 vim server.xml </span><br><span class="line"><span class="meta">#</span><span class="bash">设置服务端口以及管理端口 </span></span><br><span class="line">&lt;property name=&quot;serverPort&quot;&gt;18067&lt;/property&gt; </span><br><span class="line">&lt;property name=&quot;managerPort&quot;&gt;19067&lt;/property&gt; </span><br><span class="line"></span><br><span class="line">./startup_nowrap.sh &amp;&amp; tail -f ../logs/mycat.log</span><br></pre></td></tr></table></figure><p>节点二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cp mycat-node1/ mycat-node2 -R </span><br><span class="line">vim wrapper.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">设置jmx端口 </span></span><br><span class="line">wrapper.java.additional.7=-Dcom.sun.management.jmxremote.port=11986 vim server.xml </span><br><span class="line"><span class="meta">#</span><span class="bash">设置服务端口以及管理端口 </span></span><br><span class="line">&lt;property name=&quot;serverPort&quot;&gt;18068&lt;/property&gt; </span><br><span class="line">&lt;property name=&quot;managerPort&quot;&gt;19068&lt;/property&gt; </span><br><span class="line"></span><br><span class="line">./startup_nowrap.sh &amp;&amp; tail -f ../logs/mycat.log</span><br></pre></td></tr></table></figure><h3 id="5-部署Haproxy"><a href="#5-部署Haproxy" class="headerlink" title="5.部署Haproxy"></a>5.部署Haproxy</h3><p>配置haproxy.cfg成功进入界面并看到mycat两个节点都成功连接</p><p>。。。</p><p>至此Mysql集群的搭建算是基本完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql集群搭建&quot;&gt;&lt;a href=&quot;#Mysql集群搭建&quot; class=&quot;headerlink&quot; title=&quot;Mysql集群搭建&quot;&gt;&lt;/a&gt;Mysql集群搭建&lt;/h1&gt;&lt;h2 id=&quot;一、系统框架存在的问题&quot;&gt;&lt;a href=&quot;#一、系统框架存在的问题&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticStack之kibana与Logstash入门</title>
    <link href="http://example.com/2020/12/03/ElasticStack%E4%B9%8Bkibana%E4%B8%8ELogstash%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2020/12/03/ElasticStack%E4%B9%8Bkibana%E4%B8%8ELogstash%E5%85%A5%E9%97%A8/</id>
    <published>2020-12-03T09:11:26.000Z</published>
    <updated>2020-12-03T09:59:36.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kibana与Logstash入门学习搭建"><a href="#Kibana与Logstash入门学习搭建" class="headerlink" title="Kibana与Logstash入门学习搭建"></a>Kibana与Logstash入门学习搭建</h1><p>一、Kibana</p><p>官网：<a href="https://www.elastic.co/cn/products/kibana">https://www.elastic.co/cn/products/kibana</a></p><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以</p><p>使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对</p><p>数据进行多元化的分析和呈现。</p><p>1.安装部署</p><p>两种方式：</p><p>本地安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压安装包</span></span><br><span class="line">tar -xvf kibana-6.5.4-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置文件</span></span><br><span class="line">vim config/kibana.yml</span><br><span class="line"></span><br><span class="line">server.host: &quot;192.168.1.7&quot; #对外暴露服务的地址 </span><br><span class="line">elasticsearch.url: &quot;http://192.168.1.7:9200&quot; #配置Elasticsearch</span><br></pre></td></tr></table></figure><p>docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull kibana:6.5.4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建配置文件 </span></span><br><span class="line">vim kibana.yml </span><br><span class="line">server.host: &quot;192.168.1.7&quot; #配置服务地址</span><br><span class="line">elasticsearch.url: &quot;http://192.168.1.7:9200&quot; #配置elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name kibana --net host -v /haoke/beats/kibana- docker/kibana.yml:/usr/share/kibana/config/kibana.yml kibana:6.5.4 #配置文件映射</span><br></pre></td></tr></table></figure><p>Metricbeat仪表盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改metricbeat配置 </span></span><br><span class="line">setup.kibana: host: &quot;192.168.1.7:5601&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash">安装仪表盘到Kibana </span></span><br><span class="line">./metricbeat setup --dashboards</span><br></pre></td></tr></table></figure><p>Filebeat仪表盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置文件 添加kibana配置</span></span><br><span class="line">setup.kibana: </span><br><span class="line">  host: &quot;192.168.1.7:5601&quot;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">安装仪表盘到kibana </span></span><br><span class="line">./filebeat -c haoke-redis.yml setup</span><br></pre></td></tr></table></figure><p>二、Logstash</p><p>集中、转换、存储数据，主要用来处理数据</p><p>是一种管道的概念：分三步，输入、过滤、输出。</p><p>三、整合一个Filebeat输出日志的小项目–简单搭建ElasticStack</p><p>Nginx启动–产生log文件–filebeat读取–发送到logstash–过滤后发送到elasticsearch</p><p>配置filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">vim haoke-nginx.yml </span></span><br><span class="line">filebeat.inputs: </span><br><span class="line">- type: log </span><br><span class="line">  enabled: true </span><br><span class="line">  paths: </span><br><span class="line">    - /var/log/nginx/access.log </span><br><span class="line">  tags: [&quot;log&quot;] </span><br><span class="line">  fields: </span><br><span class="line">  from: nginx </span><br><span class="line">  fields_under_root: false</span><br><span class="line">output.logstash: #输出到logstash而不输出到elasticsearch</span><br><span class="line">  hosts: [&quot;192.168.1.7:5044&quot;]</span><br></pre></td></tr></table></figure><p>配置logstash</p><p>1.修改nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">log_format main &#x27;$remote_addr - $remote_user [$time_local] &#x27; </span><br><span class="line">&#x27;&quot;$request&quot; $status $body_bytes_sent &#x27; </span><br><span class="line">&#x27;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#x27;;</span><br><span class="line">access_log /var/log/nginx/access.log main;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.编写nginx-patterns文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NGINX_ACCESS %&#123;IPORHOST:remote_addr&#125; - %&#123;USERNAME:remote_user&#125; \[% &#123;HTTPDATE:time_local&#125;\] \&quot;%&#123;DATA:request&#125;\&quot; %&#123;INT:status&#125; %&#123;NUMBER:bytes_sent&#125; \&quot;% &#123;DATA:http_referer&#125;\&quot; \&quot;%&#123;DATA:http_user_agent&#125;\&quot;</span><br></pre></td></tr></table></figure><p>3.修改haoke-pipeline.conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input &#123; </span><br><span class="line">beats &#123; </span><br><span class="line">port &#x3D;&gt; &quot;5044&quot; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123; </span><br><span class="line">grok &#123;</span><br><span class="line">patterns_dir &#x3D;&gt; &quot;&#x2F;haoke&#x2F;logstash-6.5.4&#x2F;nginx-patterns&quot; </span><br><span class="line">match &#x3D;&gt; &#123; &quot;message&quot; &#x3D;&gt; &quot;%&#123;NGINX_ACCESS&#125;&quot;&#125; </span><br><span class="line">remove_tag &#x3D;&gt; [ &quot;_grokparsefailure&quot; ] </span><br><span class="line">add_tag &#x3D;&gt; [ &quot;nginx_access&quot; ] </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">output &#123; </span><br><span class="line">elasticsearch &#123; </span><br><span class="line">hosts &#x3D;&gt; [ &quot;192.168.1.7:9200&quot;,&quot;192.168.1.7:9201&quot;,&quot;192.168.1.7:9202&quot; ] </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试。。。成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kibana与Logstash入门学习搭建&quot;&gt;&lt;a href=&quot;#Kibana与Logstash入门学习搭建&quot; class=&quot;headerlink&quot; title=&quot;Kibana与Logstash入门学习搭建&quot;&gt;&lt;/a&gt;Kibana与Logstash入门学习搭建&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticStack之Beats学习</title>
    <link href="http://example.com/2020/12/02/ElasticStack%E4%B9%8BBeats%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/12/02/ElasticStack%E4%B9%8BBeats%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-12-02T08:13:51.000Z</published>
    <updated>2020-12-02T09:30:45.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Beats–轻量型数据采集器"><a href="#Beats–轻量型数据采集器" class="headerlink" title="Beats–轻量型数据采集器"></a>Beats–轻量型数据采集器</h1><p>官网地址：<a href="https://www.elastic.co/cn/products/beats">https://www.elastic.co/cn/products/beats</a></p><h2 id="一、Filebeat–轻量型日志采集器"><a href="#一、Filebeat–轻量型日志采集器" class="headerlink" title="一、Filebeat–轻量型日志采集器"></a>一、Filebeat–轻量型日志采集器</h2><h3 id="1-工作原理："><a href="#1-工作原理：" class="headerlink" title="1.工作原理："></a>1.工作原理：</h3><ul><li><p>Harvester</p><ul><li>负责读取单个文件的内容</li><li>文件被删除或者重命名，将继续读取该文件</li></ul></li><li><p>Prospector</p><ul><li>找到要读取文件的来源</li><li>管理harvester</li><li>若输入类型为日志类型，则查找路径匹配的所有文件，并为每一个文件分配启动一个harvester</li><li>目前支持两种类型：log和stdin</li></ul></li><li><p>filebeat如何保持文件状态（如何判断该读取文件的哪一行）</p><ul><li>filebeat会保存每个文件的状态并经常刷新到register中（filebeat目录下的register目录下）</li><li>该状态记录了harvester读取的最后一行在哪</li><li>如果输出无法访问（比如ealsticsearch宕机），filebeat会跟踪最后一行，输出可用时继续下一行发送</li></ul></li></ul><h3 id="2-基本配置讲解"><a href="#2-基本配置讲解" class="headerlink" title="2.基本配置讲解"></a>2.基本配置讲解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建如下配置文件 xxx.yml</span></span><br><span class="line">filebeat.inputs: </span><br><span class="line">- type: stdin #控制台输入  log ：日志</span><br><span class="line">  enabled: true </span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 3 #分片数3 </span><br><span class="line">output.console: #输出到控制台</span><br><span class="line">  pretty: true </span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">#</span><span class="bash">启动filebeat</span></span><br><span class="line">./filebeat -e -c xxx.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建如下配置文件 xxx.yml</span></span><br><span class="line">filebeat.inputs: </span><br><span class="line">- type: log #日志</span><br><span class="line">  enabled: true </span><br><span class="line">  paths:</span><br><span class="line">    - /haoke/beats/logs/*.log #自己需要采集的日志路径</span><br><span class="line">  tags: [&quot;web&quot;] #添加自定义tag，便于后续的处理</span><br><span class="line">  fields: #添加自定义字段</span><br><span class="line">  from: haoke-im</span><br><span class="line">  fields_under_root: true #true为添加到根节点，false为添加到子节点中</span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 3 #分片数3 </span><br><span class="line">output.console: #输出到控制台</span><br><span class="line">  pretty: true </span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建如下配置文件 xxx.yml</span></span><br><span class="line">filebeat.inputs: </span><br><span class="line">- type: log #日志</span><br><span class="line">  enabled: true </span><br><span class="line">  paths:</span><br><span class="line">    - /haoke/beats/logs/*.log #自己需要采集的日志路径</span><br><span class="line">  tags: [&quot;web&quot;] #添加自定义tag，便于后续的处理</span><br><span class="line">  fields: #添加自定义字段</span><br><span class="line">  from: haoke-im</span><br><span class="line">  fields_under_root: true #true为添加到根节点，false为添加到子节点中</span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 3 #分片数3</span><br><span class="line">output.elasticsearch: #指定ES的配置</span><br><span class="line">hosts: [&quot;192.168.1.7:9200&quot;,&quot;192.168.1.7:9201&quot;,&quot;192.168.1.7:9202&quot;] #如果是集群就可以配置多个地址</span><br></pre></td></tr></table></figure><h3 id="3-Module"><a href="#3-Module" class="headerlink" title="3.Module"></a>3.Module</h3><p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我</p><p>们的配置，直接就可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">./filebeat modules list</span><br><span class="line">Enabled:#开启的module</span><br><span class="line"></span><br><span class="line">Disabled:#未开启的module</span><br><span class="line">apache2 </span><br><span class="line">auditd </span><br><span class="line">elasticsearch </span><br><span class="line">haproxy </span><br><span class="line">icinga </span><br><span class="line">iis </span><br><span class="line">kafka </span><br><span class="line">kibana</span><br><span class="line">logstash </span><br><span class="line">mongodb </span><br><span class="line">mysql</span><br><span class="line">nginx </span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">redis </span><br><span class="line">suricata </span><br><span class="line">system </span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><p>以redis module为例示范如何开启redis module以及怎样修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./filebeat modules enable redis #启动</span><br><span class="line">./filebeat modules disable redis #禁用</span><br><span class="line"></span><br><span class="line">Enabled: </span><br><span class="line">redis</span><br><span class="line">Disabled: </span><br><span class="line"><span class="meta">#</span><span class="bash">...</span></span><br></pre></td></tr></table></figure><p>redis module 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd modules.d/</span><br><span class="line">vim redis.yml</span><br><span class="line"></span><br><span class="line">- module: redis</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Main logs</span></span><br><span class="line">  log:</span><br><span class="line">    enabled: true</span><br><span class="line">    # Set custom paths for the log files. If left empty, </span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    var.paths: [&quot;/data/redis-data/node01/*.log&quot;] #主要修改redis的log地址</span><br><span class="line">    </span><br><span class="line">    # Slow logs, retrieved via the Redis API (SLOWLOG)</span><br><span class="line">    slowlog:</span><br><span class="line">      enabled: false</span><br><span class="line">      </span><br><span class="line">      # The Redis hosts to connect to. </span><br><span class="line">      #var.hosts: [&quot;localhost:6379&quot;]</span><br><span class="line">      #...</span><br></pre></td></tr></table></figure><p>redis默认情况下，是不会输出日志的，需要进行配置，前面我们使用的容器都没有配置日志输出，下面需要配置一</p><p>下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker create --name redis-node01 -v /data/redis-data/node01:/data -p 6379:6379 redis:5.0.2 --cluster-enabled yes --cluster-config-file nodes-node-01.conf --loglevel debug --logfile nodes-node-01.log</span><br><span class="line"></span><br><span class="line">docker create --name redis-node02 -v /data/redis-data/node02:/data -p 6380:6379 redis:5.0.2 --cluster-enabled yes --cluster-config-file nodes-node-02.conf --loglevel debug --logfile nodes-node-02.log</span><br><span class="line"></span><br><span class="line">docker create --name redis-node03 -v /data/redis-data/node03:/data -p 6381:6379 redis:5.0.2 --cluster-enabled yes --cluster-config-file nodes-node-03.conf --loglevel debug --logfile nodes-node-03.log</span><br></pre></td></tr></table></figure><blockquote><p>loglevel 日志等级分为：debug、verbose、notice、warning</p><p>其中，debug 会有大量信息，对开发、测试有用；</p><p>verbose 等于log4j 中的info，有很多信息，但是不会像debug那样乱；</p><p>notice 一般信息；</p><p>warning 只有非常重要/关键的消息被记录。</p></blockquote><p>配置filebeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filebeat.inputs: </span><br><span class="line">- type: log #日志</span><br><span class="line">  enabled: true </span><br><span class="line">  paths:</span><br><span class="line">    - /haoke/beats/logs/*.log #自己需要采集的日志路径</span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 3 #分片数3</span><br><span class="line">output.elasticsearch: #指定ES的配置</span><br><span class="line">  hosts: [&quot;192.168.1.7:9200&quot;,&quot;192.168.1.7:9201&quot;,&quot;192.168.1.7:9202&quot;] #如果是集群就可以配置多个地址</span><br><span class="line">filebeat.config.modules: #加载module</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml </span><br><span class="line">  reload.enabled: false</span><br></pre></td></tr></table></figure><h2 id="二、Metricbeat–轻量型指标采集器"><a href="#二、Metricbeat–轻量型指标采集器" class="headerlink" title="二、Metricbeat–轻量型指标采集器"></a>二、Metricbeat–轻量型指标采集器</h2><p>用于从系统和服务中收集指标</p><p>Metricbeat有2部分组成</p><ul><li>Module<ul><li>收集的对象，如：mysql、操作系统等</li></ul></li><li>Metricset<ul><li>收集的指标集合，如：cpu，network，memory等</li></ul></li></ul><p>配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim metricbeat.yml</span><br><span class="line"></span><br><span class="line">metricbeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml </span><br><span class="line">  reload.enabled: false</span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 1 #分片数自己设置</span><br><span class="line">  index.codec: best_compression</span><br><span class="line">setup.kibana: </span><br><span class="line">output.elasticsearch: </span><br><span class="line">  hosts: [&quot;192.168.1.7:9200&quot;,&quot;192.168.1.7:9201&quot;,&quot;192.168.1.7:9202&quot;] #自己的地址</span><br><span class="line">processors: </span><br><span class="line">  - add_host_metadata: ~ </span><br><span class="line">  - add_cloud_metadata: ~</span><br></pre></td></tr></table></figure><p>Module使用，直接开启某module然后配置yml文件（如redis.yml ），设置集群的地址等，直接启动就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Beats–轻量型数据采集器&quot;&gt;&lt;a href=&quot;#Beats–轻量型数据采集器&quot; class=&quot;headerlink&quot; title=&quot;Beats–轻量型数据采集器&quot;&gt;&lt;/a&gt;Beats–轻量型数据采集器&lt;/h1&gt;&lt;p&gt;官网地址：&lt;a href=&quot;https://</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>elasticsearch入门学习</title>
    <link href="http://example.com/2020/11/26/elasticsearch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/11/26/elasticsearch%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-11-26T13:29:10.000Z</published>
    <updated>2020-11-28T11:42:18.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticStack之一elasticsearch入门"><a href="#ElasticStack之一elasticsearch入门" class="headerlink" title="ElasticStack之一elasticsearch入门"></a>ElasticStack之一elasticsearch入门</h1><h2 id="一、介绍：Elasticsearch-基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。"><a href="#一、介绍：Elasticsearch-基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。" class="headerlink" title="一、介绍：Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。"></a>一、介绍：Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</h2><h2 id="二、docker安装："><a href="#二、docker安装：" class="headerlink" title="二、docker安装："></a>二、docker安装：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">拉取镜像 </span></span><br><span class="line">docker pull elasticsearch:6.5.4 #某个版本</span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器 </span></span><br><span class="line">docker create --name elasticsearch --net host -e &quot;discovery.type=single-node&quot; -e &quot;network.host=172.16.55.185&quot; elasticsearch:6.5.4 #虚拟机IP地址</span><br><span class="line"><span class="meta">#</span><span class="bash">启动 </span></span><br><span class="line">docker start elasticsearch </span><br><span class="line"><span class="meta">#</span><span class="bash">查看日志 </span></span><br><span class="line">docker logs elasticsearch</span><br></pre></td></tr></table></figure><h2 id="三、elasticsearch-head-提供界面管理工具"><a href="#三、elasticsearch-head-提供界面管理工具" class="headerlink" title="三、elasticsearch-head 提供界面管理工具"></a>三、elasticsearch-head 提供界面管理工具</h2><h2 id="四、Restful-API"><a href="#四、Restful-API" class="headerlink" title="四、Restful API"></a>四、Restful API</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT http://172.16.55.185:9200/haoke #创建非结构化索引</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>,  </span><br><span class="line">            <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE http://172.16.55.185:9200/haoke  #删除索引</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/haoke/user/1001 #插入数据</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/haoke/user/  #不指定Id插入数据，id自动生成</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1002</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张阿三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。</span><br><span class="line">PUT http://172.16.55.185:9200/haoke/user/1001</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">可以局部更新，原因是在内部，依然会查询到这个文档数据，然后进行覆盖操作</span><br><span class="line">POST http://172.16.55.185:9200/haoke/user/1001/_update </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>: <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE http://172.16.55.185:9200/haoke/user/1001 #删除数据</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET http://172.16.55.185:9200/haoke/user/BbPe_WcB9cFOnF3uebvr #根据id查询数据</span><br><span class="line">GET http://172.16.55.185:9200/haoke/user/_search #搜索全部数据 (默认返回十条)</span><br><span class="line">GET http://172.16.55.185:9200/haoke/user/_search?q=age:20 #查询年龄等于20的用户</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/haoke/user/_search #DSL搜索</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST http://172.16.55.185:9200/haoke/user/_search </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;gt&quot;</span>: <span class="number">30</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;must&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST http://172.16.55.185:9200/haoke/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三 李四&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/haoke/user/_search #高亮显示</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三 李四&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/haoke/user/_search#聚合</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;all_interests&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;age&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、结构化查询"><a href="#五、结构化查询" class="headerlink" title="五、结构化查询"></a>五、结构化查询</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/itcast/person/_search</span><br><span class="line">#term查询：term 主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串(未经分析的文本数据类</span><br><span class="line">#型)：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#terms查询：terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一</span><br><span class="line">#起去做匹配：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: [</span><br><span class="line">                <span class="number">20</span>,</span><br><span class="line">                <span class="number">21</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#range查询：range 过滤允许我们按照指定范围查找一批数据：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;gte&quot;</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">&quot;lte&quot;</span>: <span class="number">22</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#exist查询：exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的 IS_NULL 条件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;exists&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;card&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#match查询：match 查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</span><br><span class="line">#如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析 match 一下查询字符：</span><br><span class="line">&#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;age&quot;</span>: <span class="number">26</span> &#125;&#125; </span><br><span class="line">&#123;<span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2014-09-01&quot;</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;public&quot;</span>: <span class="literal">true</span> &#125;&#125; </span><br><span class="line">&#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;full_text&quot;</span> &#125;&#125;</span><br><span class="line">#bool查询：bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：</span><br><span class="line">#must :: 多个查询条件的完全匹配,相当于 and 。</span><br><span class="line">#must_not :: 多个查询条件的相反匹配，相当于 not 。 </span><br><span class="line">#should :: #至少有一个查询条件匹配, 相当于 or 。</span><br><span class="line">#这些参数可以分别继承一个查询条件或者一个查询条件的数组：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、分词"><a href="#六、分词" class="headerlink" title="六、分词"></a>六、分词</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/_analyze #分词api</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">POST http://172.16.55.185:9200/itcast/_analyze #指定索引分词</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    &quot;field&quot;: &quot;hobby&quot;,  #指定字段</span><br><span class="line">    &quot;text&quot;: &quot;听音乐&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>五种内置分词：Standard、Simple、Whitespace、Stop、Keyword了解</p><p>中文分词：ik、jieba、THULAC等，推荐ik分词器</p></blockquote><p>安装ik分词器：将elasticsearch-analysis-ik的zip包解压到/elasticsearch/plugins/ik下即可</p><p>如果docker运行先复制进容器，然后进入容器解压，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker cp /tmp/elasticsearch-analysis-ik-6.5.4.zip elasticsearch:/usr/share/elasticsearch/plugins/</span><br><span class="line"></span><br><span class="line">docker exec -it elasticsearch /bin/bash </span><br><span class="line">mkdir /usr/share/elasticsearch/plugins/ik </span><br><span class="line">cd /usr/share/elasticsearch/plugins/ik </span><br><span class="line">unzip elasticsearch-analysis-ik-6.5.4.zip</span><br></pre></td></tr></table></figure><h2 id="七、全文搜索"><a href="#七、全文搜索" class="headerlink" title="七、全文搜索"></a>七、全文搜索</h2><h3 id="1-倒排索引-由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引，简单来说就是由值找位置。"><a href="#1-倒排索引-由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引，简单来说就是由值找位置。" class="headerlink" title="1.倒排索引:由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引，简单来说就是由值找位置。"></a>1.倒排索引:由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引，简单来说就是由值找位置。</h3><p>全文搜索两个最重要的方面是：</p><ul><li>相关性（Relevance） 它是评价查询与其结果间的相关程度，并根据这种相关程度对结果排名的一种能力，这</li></ul><p>种计算方式可以是 TF/IDF 方法、地理位置邻近、模糊相似，或其他的某些算法。</p><ul><li>分析（Analysis） 它是将文本块转换为有区别的、规范化的 token 的一个过程，目的是为了创建倒排索引以</li></ul><p>及查询倒排索引。</p><h3 id="2-单词搜索"><a href="#2-单词搜索" class="headerlink" title="2.单词搜索"></a>2.单词搜索</h3><p>搜索过程说明：</p><ol><li>检测字段类型：假设查看字段为”text”字段类型，意味着查询字符串本身也应该被分词</li><li>分析查询字符串：然后将查询字符串传入ik分词器，根据输出结果判断底层使用什么查询</li><li>查找匹配文档：查找相匹配的文档</li><li>为每个文档打分</li></ol><h3 id="3-多词搜索：发现一个问题："><a href="#3-多词搜索：发现一个问题：" class="headerlink" title="3.多词搜索：发现一个问题："></a>3.多词搜索：发现一个问题：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: <span class="string">&quot;音乐 篮球&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现查询结果中包含了“音乐”、“篮球”的数据都已经被搜索到了，但我们想要的是两者都包含了的数据，Elasticsearch为我们提供了这样的逻辑关系</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: <span class="string">&quot;音乐 篮球&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;operator&quot;</span>:<span class="string">&quot;and&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加一个operator字段，值and表示两者都包含，or表示至少包含一个，而这是两种极端方式，在hobby有多个关键词时（大于2个）,在Elasticsearch中也支持这样的查询，通过minimum_should_match来指定匹配度，比如70%。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: <span class="string">&quot;音乐 篮球&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;minimum_should_match&quot;</span>:<span class="string">&quot;70%&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-权重：有些时候，我们可能需要对某些词增加权重来影响该条数据的得分"><a href="#4-权重：有些时候，我们可能需要对某些词增加权重来影响该条数据的得分" class="headerlink" title="4.权重：有些时候，我们可能需要对某些词增加权重来影响该条数据的得分"></a>4.权重：有些时候，我们可能需要对某些词增加权重来影响该条数据的得分</h3><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">POST http://172.16.55.185:9200/itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;must&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;游泳篮球&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;音乐&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span>: <span class="number">10</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;跑步&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;boost&quot;</span>: <span class="number">2</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>boost字段表示权重，根据自己需求设置。</p></blockquote><h3 id="5-短语匹配"><a href="#5-短语匹配" class="headerlink" title="5.短语匹配"></a>5.短语匹配</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;羽毛球篮球&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>短语匹配意味着不仅仅是词要匹配，并且词的顺序也要一致</p><p>如果觉得这样太过于苛刻，可以增加slop参数，允许跳过N个词进行匹配</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;羽毛球足球&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;slop&quot;</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、Elasticsearch集群"><a href="#八、Elasticsearch集群" class="headerlink" title="八、Elasticsearch集群"></a>八、Elasticsearch集群</h2><h2 id="1-集群节点"><a href="#1-集群节点" class="headerlink" title="1.集群节点"></a>1.集群节点</h2><ul><li><p>master节点</p><ul><li>配置文件中node.master属性为true(默认为true)，就有资格被选为master节点。</li><li>master节点用于控制整个集群的操作。比如创建或删除索引，管理其它非master节点等。</li></ul></li><li><p>data节点</p><ul><li>配置文件中node.data属性为true(默认为true)，就有资格被设置成data节点。</li><li>data节点主要用于执行数据相关的操作。比如文档的CRUD。</li></ul></li><li><p>客户端节点</p><ul><li>配置文件中node.master属性和node.data属性均为false。</li><li>该节点不能作为master节点，也不能作为data节点。</li><li>可以作为客户端节点，用于响应用户的请求，把请求转发到其他节点</li></ul></li><li><p>部落节点</p><ul><li><p>当一个节点配置tribe.*的时候，它是一个特殊的客户端，它可以连接多个集群，在所有连接的集群上执</p><p>行搜索和其他操作。</p></li></ul></li></ul><h3 id="2-分片和副本"><a href="#2-分片和副本" class="headerlink" title="2.分片和副本"></a>2.分片和副本</h3><p>实际上，索引只是一个用来指向一个或多个分片的逻辑命名空间。</p><p>一个分片是最小的工作单元，一个lucene实例，它本身就是一个完整的搜索引擎，但是应用程序不会和他直接通信；分片包括主分片和复制分片，复制分片只是主分片的一个副本为了防止故障数据丢失的，同时提供读请求；每个文档都对应一个单独的主分片，所以主分片的数量决定存储数据大小</p><h3 id="3-故障问题"><a href="#3-故障问题" class="headerlink" title="3.故障问题"></a>3.故障问题</h3><p>假如有三个节点，他们的配置都是node.master为true,minimum_master_nodes的大小为1。es-node1,es-node2.es-node3</p><p>node2为主节点时，停止node1时，主分片会转移到2，3两个节点，恢复后再转移回去</p><p>停止node2时，node3变为主节点，node2的主分片转移到1，3中，但是恢复node2后，并没有转移回来，而是出现脑裂现象，node2与node3都为master节点，所以出现问题。解决问题的办法：minimum_master_nodes的大小官方推荐：(N/2)+1，N为集群中节点数</p><h3 id="4-分布式文档"><a href="#4-分布式文档" class="headerlink" title="4.分布式文档"></a>4.分布式文档</h3><h3 id="1-存储方式"><a href="#1-存储方式" class="headerlink" title="1.存储方式"></a>1.存储方式</h3><p>当向一个集群保存文档时，文档存储到节点的方式既不是随机的也不是轮询的，而是固定的计算公式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard = hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure><h3 id="2-文档的写和搜索"><a href="#2-文档的写和搜索" class="headerlink" title="2.文档的写和搜索"></a>2.文档的写和搜索</h3><p>新建、索引和删除请求都是写操作，写操作只能写在主分片中，而读操作可以在主分片和复制分片中都可以，为了平衡负载</p><h3 id="3-全文搜索："><a href="#3-全文搜索：" class="headerlink" title="3.全文搜索："></a>3.全文搜索：</h3><p>全文搜索分为两个阶段：搜索和取回；1搜索：客户端发送请求给某一个节点，这一节点转发请求到每一个分片中，每一分片返回相同的固定长度的结果到开始的节点中，该节点把所以结果排序后得出最终结果。2取回：根据最终结果的信息再向相关分片发送请求获取结果中的文档详细信息，然后返回个客户端。</p><h2 id="九、Java客户端"><a href="#九、Java客户端" class="headerlink" title="九、Java客户端"></a>九、Java客户端</h2><h3 id="1-REST客户端"><a href="#1-REST客户端" class="headerlink" title="1.REST客户端"></a>1.REST客户端</h3><p>导入依赖测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestESREST</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> RestClient restClient;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder( </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>), </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9201</span>, <span class="string">&quot;http&quot;</span>), </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9202</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.restClient = restClientBuilder.build();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">    restClient.close(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//测试代码。。。查询ealsticsearch接口文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-高级REST客户端"><a href="#2-高级REST客户端" class="headerlink" title="2.高级REST客户端"></a>2.高级REST客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRestHighLevel</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> RestHighLevelClient restClient;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestClientBuilder restClientBuilder = RestClient.builder( </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>), </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9201</span>, <span class="string">&quot;http&quot;</span>), </span><br><span class="line">      <span class="keyword">new</span> HttpHost(<span class="string">&quot;172.16.55.185&quot;</span>, <span class="number">9202</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.restClient =  <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">    restClient.close(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//测试代码。。。查询ealsticsearch接口文档</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、Spring-Data-Elasticsearch"><a href="#十、Spring-Data-Elasticsearch" class="headerlink" title="十、Spring Data Elasticsearch"></a>十、Spring Data Elasticsearch</h2><p>与spring整合导入依赖，编写properties文件，编写启动类。。</p><p>编写示例对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@AllArgsConstructor</span> </span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;itcast&quot;, type = &quot;user&quot;, shards = 6, replicas = 1)</span> <span class="comment">//shards出现bug，创建后只有5个分片，可以改成自己创建索引，然后createindex设为false</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="meta">@Field(store = true)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Field</span></span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="meta">@Field</span></span><br><span class="line">  <span class="keyword">private</span> String hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span> </span><br><span class="line"><span class="meta">@SpringBootTest</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringBootES</span> </span>&#123; </span><br><span class="line">  <span class="meta">@Autowired</span> </span><br><span class="line">  <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate; <span class="comment">//spring最会玩的模版</span></span><br><span class="line">  <span class="meta">@Test</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123; </span><br><span class="line">    User user = <span class="keyword">new</span> User(); </span><br><span class="line">    user.setId(<span class="number">1001L</span>); </span><br><span class="line">    user.setAge(<span class="number">20</span>); </span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>); </span><br><span class="line">    user.setHobby(<span class="string">&quot;足球、篮球、听音乐&quot;</span>); </span><br><span class="line">    IndexQuery indexQuery = <span class="keyword">new</span> IndexQueryBuilder().withObject(user).build(); </span><br><span class="line">    String index = <span class="keyword">this</span>.elasticsearchTemplate.index(indexQuery); </span><br><span class="line">    System.out.println(index); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBulk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">           User user = <span class="keyword">new</span> User();</span><br><span class="line">           user.setId(<span class="number">1001L</span> + i);</span><br><span class="line">           user.setAge(i % <span class="number">50</span> + <span class="number">10</span>);</span><br><span class="line">           user.setName(<span class="string">&quot;张三&quot;</span> + i);</span><br><span class="line">           user.setHobby(<span class="string">&quot;足球、篮球、听音乐&quot;</span>);</span><br><span class="line">           IndexQuery indexQuery = <span class="keyword">new</span> IndexQueryBuilder().withObject(user).build();</span><br><span class="line">           list.add(indexQuery);</span><br><span class="line">       &#125;</span><br><span class="line">       Long start = System.currentTimeMillis();</span><br><span class="line">       <span class="keyword">this</span>.elasticsearchTemplate.bulkIndex(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;用时：&quot;</span> + (System.currentTimeMillis() - start));<span class="comment">//用时：4114ms</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>更新数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest();</span><br><span class="line">        indexRequest.source(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        UpdateQuery updateQuery = <span class="keyword">new</span> UpdateQueryBuilder()</span><br><span class="line">                .withId(<span class="string">&quot;1001&quot;</span>)</span><br><span class="line">                .withClass(User.class)</span><br><span class="line">                .withIndexRequest(indexRequest).build();</span><br><span class="line">        <span class="keyword">this</span>.elasticsearchTemplate.update(updateQuery);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>搜索数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       PageRequest pageRequest = PageRequest.of(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">//设置分页参数</span></span><br><span class="line">       SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder() .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>)) <span class="comment">// match查询</span></span><br><span class="line">       .withPageable(pageRequest) .build();</span><br><span class="line">       AggregatedPage&lt;User&gt; users = <span class="keyword">this</span>.elasticsearchTemplate.queryForPage(searchQuery, User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;总页数：&quot;</span> + users.getTotalPages()); <span class="comment">//获取总页数</span></span><br><span class="line">       <span class="keyword">for</span> (User user : users.getContent()) &#123;</span><br><span class="line">           <span class="comment">// 获取搜索到的数据</span></span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticStack之一elasticsearch入门&quot;&gt;&lt;a href=&quot;#ElasticStack之一elasticsearch入门&quot; class=&quot;headerlink&quot; title=&quot;ElasticStack之一elasticsearch入门&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于RocketMQ的一些内容和特性</title>
    <link href="http://example.com/2020/11/01/%E5%85%B3%E4%BA%8ERocketMQ%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%85%E5%AE%B9%E5%92%8C%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2020/11/01/%E5%85%B3%E4%BA%8ERocketMQ%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%85%E5%AE%B9%E5%92%8C%E7%89%B9%E6%80%A7/</id>
    <published>2020-11-01T07:11:07.000Z</published>
    <updated>2020-11-02T02:54:26.602Z</updated>
    
    <content type="html"><![CDATA[<p>首先是发送消息分同步和异步，</p><p>Producer的顺序消息：在某些业务中，consumer在消费消息时，是需要按照生产者发送消息的顺序进行消费的。</p><h3 id="分布式消息："><a href="#分布式消息：" class="headerlink" title="分布式消息："></a>分布式消息：</h3><p>分布式事务分类有这几种：</p><ul><li><p>基于单个JVM，数据库分库分表了（跨多个数据库）。</p></li><li><p>基于多JVM，服务拆分了（不跨数据库）。</p></li><li><p>基于多JVM，服务拆分了 并且数据库分库分表了。</p></li></ul><p>采用半消息方式，发送消息后处理完本地事务再确认</p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol><li><p>发送方向 MQ 服务端发送消息。</p></li><li><p>MQ Server 将消息持久化成功之后，向发送方 ACK 确认消息已经发送成功，此时消息为半消息。</p></li><li><p>发送方开始执行本地事务逻辑。</p></li><li><p>发送方根据本地事务执行结果向 MQ Server 提交二次确认（Commit 或是 Rollback），MQ Server 收到</p></li></ol><p>Commit 状态则将半消息标记为可投递，订阅方最终将收到该消息；MQ Server 收到 Rollback 状态则删除半</p><p>消息，订阅方将不会接受该消息。</p><ol start="5"><li>在断网或者是应用重启的特殊情况下，上述步骤4提交的二次确认最终未到达 MQ Server，经过固定时间后</li></ol><p>MQ Server 将对该消息发起消息回查。</p><ol start="6"><li><p>发送方收到消息回查后，需要检查对应消息的本地事务执行的最终结果。</p></li><li><p>发送方根据检查得到的本地事务的最终状态再次提交二次确认，MQ Server 仍按照步骤4对半消息进行操作。</p></li></ol><h3 id="Consumer的Push和Pull"><a href="#Consumer的Push和Pull" class="headerlink" title="Consumer的Push和Pull"></a>Consumer的Push和Pull</h3><p>push模式：客户端与服务端建立连接后，当服务端有消息时，将消息推送到客户端。</p><p>pull模式：客户端不断的轮询请求服务端，来获取新的消息。</p><p>底层都是pull，只不过push被封装到里面，pull需要自己实现</p><p>长轮询：发送一个pull等待服务器有消息再拉取，避免了一直pull造成压力</p><p>消息模式：集群模式和广播模式</p><p>重复消息：肯定存在的，自己解决，要么设置key相同的不处理，要么处理结果相同保持为一条。</p><h3 id="RocketMQ存储"><a href="#RocketMQ存储" class="headerlink" title="RocketMQ存储"></a>RocketMQ存储</h3><p>RocketMQ中的消息数据存储，采用了零拷贝技术（使用 mmap + write 方式），文件系统采用 Linux Ext4 文件系</p><p>统进行存储。</p><p>RocketMQ消息的存储是由ConsumeQueue和CommitLog配合完成的，CommitLog是真正存储数据的文件，</p><p>ConsumeQueue是索引文件，存储数据指向到物理文件的配置。</p><p>同步刷盘和异步刷盘</p><ul><li>同步刷盘<ul><li>在返回写成功状态时，消息已经被写入磁盘 。</li><li>具体流程是：消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程</li></ul></li></ul><p>执行完成后唤醒等待的线程，返回消息写成功的状态 。</p><ul><li>异步刷盘<ul><li>在返回写成功状态时，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大</li><li>当内存里的消息量积累到一定程度时，统一触发写磁盘动作，快速写入。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先是发送消息分同步和异步，&lt;/p&gt;
&lt;p&gt;Producer的顺序消息：在某些业务中，consumer在消费消息时，是需要按照生产者发送消息的顺序进行消费的。&lt;/p&gt;
&lt;h3 id=&quot;分布式消息：&quot;&gt;&lt;a href=&quot;#分布式消息：&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于RocketMQ发送消息报错</title>
    <link href="http://example.com/2020/10/31/%E5%85%B3%E4%BA%8ERocketMQ%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2020/10/31/%E5%85%B3%E4%BA%8ERocketMQ%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%8A%A5%E9%94%99/</id>
    <published>2020-10-31T05:43:14.000Z</published>
    <updated>2020-10-31T05:51:01.809Z</updated>
    
    <content type="html"><![CDATA[<p>报错信息：Exception in thread “main” org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</p><p>在虚拟机中rockermq配置完broker启动成功后信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The broker[itcast, 172.17.0.1:10911] boot success. serializeType&#x3D;JSON and name server is 172.16.185.55:9876</span><br></pre></td></tr></table></figure><p>发现broker的ip是172.17.0.1，外部没办法访问所以必须把IP地址改掉，在虚拟机创建一个配置文件../conf/broker.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brokerIP1=172.16.55.185 </span><br><span class="line">namesrvAddr=172.16.55.185:9876 </span><br><span class="line">brokerName=broker_haoke_im</span><br></pre></td></tr></table></figure><p>启动时指定配置文件 -c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;mqbroker -c &#x2F;haoke&#x2F;rmq&#x2F;rmqbroker&#x2F;conf&#x2F;broker.conf</span><br></pre></td></tr></table></figure><p>会发现成功信息变成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The broker[itcast, 172.16.55.185:10911] boot success. serializeType&#x3D;JSON and name server is 172.16.55.185:9876</span><br></pre></td></tr></table></figure><p>通常情况下这样就可以访问了</p><hr><p>但是我的还是不行，原因是最容易被忽略的超时问题，把生产者的超时时间设置大一点就可以我这里设置15s</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.setSendMsgTimeout(<span class="number">15000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;报错信息：Exception in thread “main” org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GraphQL学习之开发某服务接口实现</title>
    <link href="http://example.com/2020/10/30/GraphQL%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%80%E5%8F%91%E6%9F%90%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/10/30/GraphQL%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%80%E5%8F%91%E6%9F%90%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-10-30T00:34:30.000Z</published>
    <updated>2020-11-01T01:06:38.776Z</updated>
    
    <content type="html"><![CDATA[<p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.graphql-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>graphql-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写haoke.graphqls文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">schema &#123; </span><br><span class="line">query: HaokeQuery </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type HaokeQuery &#123; </span><br><span class="line">HouseResources(id:Long):HouseResources </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type HouseResources&#123; </span><br><span class="line">id:Long! title:String </span><br><span class="line">estateId:Long</span><br><span class="line">  buildingNum:String </span><br><span class="line">  buildingUnit:String </span><br><span class="line">  buildingFloorNum:String </span><br><span class="line">  rent:Int </span><br><span class="line">  rentMethod:Int </span><br><span class="line">  paymentMethod:Int </span><br><span class="line">  houseType:String </span><br><span class="line">  coveredArea:String </span><br><span class="line">  useArea:String </span><br><span class="line">  floor:String </span><br><span class="line">  orientation:String </span><br><span class="line">  decoration:Int </span><br><span class="line">  facilities:String </span><br><span class="line">  pic:String houseDesc:String </span><br><span class="line">  contact:String mobile:String </span><br><span class="line">  time:Int propertyCost:String </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写GraphQLController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;graphql&quot;)</span> <span class="comment">//前端访问地址</span></span><br><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLController</span> </span>&#123; </span><br><span class="line">  <span class="meta">@Autowired</span> </span><br><span class="line">  <span class="keyword">private</span> GraphQL graphQL; </span><br><span class="line">  <span class="meta">@GetMapping</span> </span><br><span class="line">  <span class="meta">@ResponseBody</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">graphql</span><span class="params">(<span class="meta">@RequestParam(&quot;query&quot;)</span> String query)</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.graphQL.execute(query).toSpecification(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.编写GraphQLProvider需要与SpringBoot整合，将GraphQL对象加载到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLProvider</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> GraphQL graphQL; </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> HouseResourcesService houseResourcesService; </span><br><span class="line">  <span class="meta">@PostConstruct</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">    File file = ResourceUtils.getFile(<span class="string">&quot;classpath:haoke.graphqls&quot;</span>); </span><br><span class="line">    GraphQLSchema graphQLSchema = buildSchema(file); </span><br><span class="line">    <span class="keyword">this</span>.graphQL = GraphQL.newGraphQL(graphQLSchema).build(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> GraphQLSchema <span class="title">buildSchema</span><span class="params">(File file)</span> </span>&#123; </span><br><span class="line">    TypeDefinitionRegistry typeRegistry = <span class="keyword">new</span> SchemaParser().parse(file); </span><br><span class="line">    RuntimeWiring runtimeWiring = buildWiring(); </span><br><span class="line">    SchemaGenerator schemaGenerator = <span class="keyword">new</span> SchemaGenerator(); </span><br><span class="line">    <span class="keyword">return</span> schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> RuntimeWiring <span class="title">buildWiring</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> RuntimeWiring.newRuntimeWiring() .type(<span class="string">&quot;HaokeQuery&quot;</span>, builder -&gt;  builder.dataFetcher(<span class="string">&quot;HouseResources&quot;</span>, environment -&gt; &#123; </span><br><span class="line">      Long id = environment.getArgument(<span class="string">&quot;id&quot;</span>); </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.houseResourcesService.queryById(id); </span><br><span class="line">    &#125; )).build(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> GraphQL <span class="title">graphQL</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> graphQL; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以后每当增加查询时，都需要修改该方法，如果查询方法很多的话，那么这个方法将变得非常难以维护，所以需要</p><p>进改进。</p></blockquote><p>编写MyDataFetcher接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDataFetcher</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">fieldName</span><span class="params">()</span></span>;<span class="comment">//查询名称</span></span><br><span class="line">  <span class="function">Object <span class="title">dataFetcher</span><span class="params">(DataFetchingEnvironment environment)</span></span>;<span class="comment">//具体实现查询的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类HouseResourcesDataFetcher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//加入到Spring容器 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseResourcesDataFetcher</span> <span class="keyword">implements</span> <span class="title">MyDataFetcher</span> </span>&#123; </span><br><span class="line">  <span class="meta">@Autowired</span> </span><br><span class="line">  <span class="keyword">private</span> HouseResourcesService houseResourcesService; </span><br><span class="line">  <span class="meta">@Override</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">fieldName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;HouseResources&quot;</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">dataFetcher</span><span class="params">(DataFetchingEnvironment environment)</span> </span>&#123; </span><br><span class="line">    Long id = environment.getArgument(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.houseResourcesService.queryById(id); <span class="comment">//实现了逻辑</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改GraphQLProvider逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLProvider</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> GraphQL graphQL; </span><br><span class="line">  <span class="meta">@Autowired</span> </span><br><span class="line">  <span class="keyword">private</span> List&lt;MyDataFetcher&gt; myDataFetchers; <span class="comment">//注入容器中所有的MyDataFetcher实现类 </span></span><br><span class="line">  <span class="meta">@PostConstruct</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">    File file = ResourceUtils.getFile(<span class="string">&quot;classpath:haoke.graphqls&quot;</span>); </span><br><span class="line">    GraphQLSchema graphQLSchema = buildSchema(file); </span><br><span class="line">    <span class="keyword">this</span>.graphQL = GraphQL.newGraphQL(graphQLSchema).build(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> GraphQLSchema <span class="title">buildSchema</span><span class="params">(File file)</span> </span>&#123; </span><br><span class="line">    TypeDefinitionRegistry typeRegistry = <span class="keyword">new</span> SchemaParser().parse(file); </span><br><span class="line">    RuntimeWiring runtimeWiring = buildWiring(); </span><br><span class="line">    SchemaGenerator schemaGenerator = <span class="keyword">new</span> SchemaGenerator(); </span><br><span class="line">    <span class="keyword">return</span> schemaGenerator.makeExecutableSchema(typeRegistry, runtimeWiring); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> RuntimeWiring <span class="title">buildWiring</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> RuntimeWiring.newRuntimeWiring() .type(<span class="string">&quot;HaokeQuery&quot;</span>, builder -&gt; &#123; </span><br><span class="line">      <span class="keyword">for</span> (MyDataFetcher myDataFetcher : myDataFetchers) &#123; </span><br><span class="line">        builder.dataFetcher(myDataFetcher.fieldName(), environment -&gt; </span><br><span class="line">                            myDataFetcher.dataFetcher(environment));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> builder; </span><br><span class="line">    &#125;).build(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Bean</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> GraphQL <span class="title">graphQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> graphQL; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面如果要加业务逻辑之类的直接实现MyDataFetcher接口，把实现逻辑方法写一下，在Provider中通过myDataFetchers注入容器中所有的实现类，然后在方法中循环实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.导入依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GraphQL学习之java实现</title>
    <link href="http://example.com/2020/10/30/GraphQL%E5%AD%A6%E4%B9%A0%E4%B9%8Bjava%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/10/30/GraphQL%E5%AD%A6%E4%B9%A0%E4%B9%8Bjava%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-10-30T00:33:21.000Z</published>
    <updated>2020-10-30T01:40:11.312Z</updated>
    
    <content type="html"><![CDATA[<p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.graphql-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>graphql-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：graphql-java包并没有发布到maven中央仓库，需要配置第三方仓库才能使用。</p><p>在setting.xml文件里进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>bintray<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>bintray<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://dl.bintray.com/andimarek/graphql-java<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>bintray<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://dl.bintray.com/andimarek/graphql-java<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span> ………………………………………… </span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span> ……………… </span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>bintray<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>创建user对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.graphql.vo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line">  <span class="keyword">private</span> String name; </span><br><span class="line">  <span class="keyword">private</span> Integer age; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name, Integer age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.id = id; </span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> id; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.id = id; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写查询User对象实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#对应的User定义如下 </span><br><span class="line">schema &#123; #定义查询</span><br><span class="line">query: UserQuery </span><br><span class="line">&#125;</span><br><span class="line">type UserQuery &#123; #定义查询的类型 </span><br><span class="line">user : User #指定对象以及参数类型 </span><br><span class="line">&#125;</span><br><span class="line">type User &#123; #定义对象 </span><br><span class="line">id:Long! # !表示该属性是非空项 </span><br><span class="line">name:String</span><br><span class="line">age:Int </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.graphql.demo; </span><br><span class="line"><span class="keyword">import</span> cn.itcast.graphql.vo.User; </span><br><span class="line"><span class="keyword">import</span> graphql.ExecutionResult; </span><br><span class="line"><span class="keyword">import</span> graphql.GraphQL; </span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLFieldDefinition; </span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLObjectType; </span><br><span class="line"><span class="keyword">import</span> graphql.schema.GraphQLSchema; </span><br><span class="line"><span class="keyword">import</span> graphql.schema.StaticDataFetcher; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.Scalars.*; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLFieldDefinition.newFieldDefinition; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> graphql.schema.GraphQLObjectType.newObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLDemo</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 定义Schema </span></span><br><span class="line"><span class="comment">  * &lt;p&gt; </span></span><br><span class="line"><span class="comment">  * schema &#123; #定义查询 </span></span><br><span class="line"><span class="comment">  * query: UserQuery </span></span><br><span class="line"><span class="comment">  * &#125; </span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphQLSchema <span class="title">createGraphqlSchema</span><span class="params">(GraphQLFieldDefinition userDefinition)</span> </span>&#123;   </span><br><span class="line">    GraphQLObjectType userQuery = newObject().name(<span class="string">&quot;userQuery&quot;</span>) .field(userDefinition).build(); </span><br><span class="line">    <span class="keyword">return</span> GraphQLSchema.newSchema().query(userQuery).build(); </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 定义查询的类型 </span></span><br><span class="line"><span class="comment">  * &lt;p&gt; </span></span><br><span class="line"><span class="comment">  * type UserQuery &#123; #定义查询的类型 </span></span><br><span class="line"><span class="comment">  * user : User #指定对象 </span></span><br><span class="line"><span class="comment">  * &#125; </span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphQLFieldDefinition <span class="title">createUserDefinition</span><span class="params">(GraphQLObjectType userType)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> newFieldDefinition()</span><br><span class="line">        .name(<span class="string">&quot;User&quot;</span>)</span><br><span class="line">        .type(userType)</span><br><span class="line">        <span class="comment">//静态数据 （和下面设置参数二选一） </span></span><br><span class="line">        .dataFetcher(<span class="keyword">new</span> StaticDataFetcher(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">20</span>)))</span><br><span class="line">        <span class="comment">// 设置参数 （和上面静态数据二选一）</span></span><br><span class="line">        .argument(newArgument().name(<span class="string">&quot;id&quot;</span>).type(GraphQLLong).build()) </span><br><span class="line">        .dataFetcher(environment -&gt; &#123;  <span class="comment">// environment是从前端传来的数据</span></span><br><span class="line">          Long id = environment.getArgument(<span class="string">&quot;id&quot;</span>); </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">&quot;张三_&quot;</span>+id, <span class="number">20</span> + id.intValue()); &#125;)</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 定义User对象类型 </span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * type User &#123; #定义对象 </span></span><br><span class="line"><span class="comment">  * id:Long! # !表示该属性是非空项 </span></span><br><span class="line"><span class="comment">  * name:String </span></span><br><span class="line"><span class="comment">  * age:Int </span></span><br><span class="line"><span class="comment">  * &#125; </span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphQLObjectType <span class="title">createUserObjectType</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> newObject()</span><br><span class="line">        .name(<span class="string">&quot;User&quot;</span>)</span><br><span class="line">        .field(newFieldDefinition().name(<span class="string">&quot;id&quot;</span>).type(GraphQLLong))</span><br><span class="line">        .field(newFieldDefinition().name(<span class="string">&quot;name&quot;</span>).type(GraphQLString))</span><br><span class="line">        .field(newFieldDefinition().name(<span class="string">&quot;age&quot;</span>).type(GraphQLInt))</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//主函数测试</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到userType放入GraphQLFieldDefinition中</span></span><br><span class="line">    GraphQLObjectType userObjectType = createUserObjectType();</span><br><span class="line">    <span class="comment">//得到userDefinition放入GraphQLSchema中</span></span><br><span class="line">    GraphQLFieldDefinition userDefinition = createUserDefinition(userObjectType);</span><br><span class="line">    <span class="comment">//新建GraphQL对象</span></span><br><span class="line">    GraphQL graphQL = GraphQL.newGraphQL(createGraphqlSchema(userDefinition)).build();</span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    String query = <span class="string">&quot;&#123;User&#123;id,name&#125;&#125;&quot;</span>; <span class="comment">//&#123;User(id:1)&#123;id,name&#125;&#125; 设置查询参数的查询条件</span></span><br><span class="line">      <span class="comment">//执行</span></span><br><span class="line">      ExecutionResult executionResult = graphQL.execute(query);</span><br><span class="line">     <span class="comment">//打印数据</span></span><br><span class="line">    System.out.println...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用SDL构建schema</p><blockquote><p>推荐使用：SDL方法</p></blockquote><p>创建user.graphqls文件</p><p>在resources目录下创建user.graphqls文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">schema &#123; </span><br><span class="line">query: UserQuery</span><br><span class="line">&#125;</span><br><span class="line">type UserQuery &#123; </span><br><span class="line">user(id:Long) : User </span><br><span class="line">&#125;</span><br><span class="line">type User &#123;</span><br><span class="line">    id:Long! </span><br><span class="line">    name:String</span><br><span class="line">    age:Int </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装graphql插件</p><p>实现：因为在配置文件中，所以一定要读取配置文件得到相应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphQLSDLDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 读取文件内容 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> fileName </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileToString</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> IOUtils.toString(GraphQLSDLDemo.class.getClassLoader().getResourceAsStream(fileName ), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//定义Schema</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GraphQLSchema <span class="title">createGraphqlSchema</span><span class="params">(TypeDefinitionRegistry typeRegistry, RuntimeWiring wiring)</span> </span>&#123;</span><br><span class="line">  SchemaGenerator schemaGenerator = <span class="keyword">new</span> SchemaGenerator();</span><br><span class="line">        <span class="keyword">return</span> schemaGenerator.makeExecutableSchema(typeRegistry, wiring);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义类型的注册器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TypeDefinitionRegistry <span class="title">createTypeDefinitionRegistry</span><span class="params">(String fileContent)</span></span>&#123;</span><br><span class="line">    SchemaParser schemaParser = <span class="keyword">new</span> SchemaParser();</span><br><span class="line">      <span class="keyword">return</span> schemaParser.parse(fileContent);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//解决数据查询问题</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RuntimeWiring <span class="title">createRuntimeWiring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RuntimeWiring.newRuntimeWiring()</span><br><span class="line">          .type(<span class="string">&quot;UserQuery&quot;</span>, typeWiring -&gt; typeWiring</span><br><span class="line">                .dataFetcher(<span class="string">&quot;user&quot;</span>, environment -&gt; &#123;</span><br><span class="line">                  Long id = environment.getArgument(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">&quot;张三_&quot;</span>+id, <span class="number">20</span> + id.intValue());</span><br><span class="line">                  &#125;)</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;user.graphqls&quot;</span>;</span><br><span class="line">      TypeDefinitionRegistry registry=createTypeDefinitionRegistry(readFileToString(fileName));</span><br><span class="line">      RuntimeWiring runtimeWiring = createRuntimeWiring();</span><br><span class="line">      <span class="comment">//新建GraphQl对象--createGraphqlSchema实现方式与第一次不同，两个参数</span></span><br><span class="line">      GraphQL graphQL = GraphQL.newGraphQL(createGraphqlSchema(registry, runtimeWiring)).build();</span><br><span class="line">      String query = <span class="string">&quot;&#123;user(id:1)&#123;id,name,age&#125;&#125;&quot;</span>;</span><br><span class="line">      ExecutionResult executionResult = graphQL.execute(query);</span><br><span class="line">      System.out.println...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两种方式的数据都是静态数据，以后要自己实现查询语句。</p><p>第一种用java一步一步的写graphql语句一样，先定义查询，再定义查询类型，再定义对象类型；</p><p>第二种写配置文件，读取之后放入定义类型的注册器中，createGraphqlSchema还需要一个参数就是runtimeWiring解决数据查询问题</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.导入依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GraphQL入门</title>
    <link href="http://example.com/2020/10/30/GraphQL%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2020/10/30/GraphQL%E5%85%A5%E9%97%A8/</id>
    <published>2020-10-29T23:57:42.000Z</published>
    <updated>2020-10-30T00:29:09.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、GraphQL介绍"><a href="#一、GraphQL介绍" class="headerlink" title="一、GraphQL介绍"></a>一、GraphQL介绍</h3><p>GraphQL 是由 Facebook 创造的用于描述复杂数据模型的一种查询语言。这里查询语言所指的并不是常规意义上</p><p>的类似 sql 语句的查询语言，而是一种用于前后端数据查询方式的规范。</p><h3 id="二、GraphQL比Restful的优点"><a href="#二、GraphQL比Restful的优点" class="headerlink" title="二、GraphQL比Restful的优点"></a>二、GraphQL比Restful的优点</h3><p>解决Restful接口的资源浪费问题，因为当我们想要查询某请求的id和name字段，但是他还有很多字段我们不需要，如果全部拿到而只响应id和name那就是一种资源浪费。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#请求 GET http://127.0.0.1/user/1001</span><br><span class="line">#响应： </span><br><span class="line">&#123; </span><br><span class="line">id : 1001, </span><br><span class="line">name : &quot;张三&quot;, </span><br><span class="line">age : 20, //不需要</span><br><span class="line">address : &quot;北京市&quot;, //不需要</span><br><span class="line">……  //不需要</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Restful接口的请求与响应</p></blockquote><p>还有一种问题是Retful的一次请求不能满足需求，需要有多次请求才能完成，而GraphQL可以一次请求满足</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#查询用户信息 GET http://127.0.0.1/user/1001 </span><br><span class="line">#响应： </span><br><span class="line">&#123; </span><br><span class="line">id : 1001, </span><br><span class="line">name : &quot;张三&quot;, </span><br><span class="line">age : 20, </span><br><span class="line">address : &quot;北京市&quot;,</span><br><span class="line">  …… </span><br><span class="line">&#125;</span><br><span class="line">#查询用户的身份证信息 GET http://127.0.0.1/card/8888 </span><br><span class="line">#响应： </span><br><span class="line">&#123; </span><br><span class="line">id : 8888, </span><br><span class="line">name : &quot;张三&quot;, </span><br><span class="line">cardNumber : &quot;999999999999999&quot;, </span><br><span class="line">address : &quot;北京市&quot;, </span><br><span class="line">…… </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Restful接口的多次请求满足响应需求</p></blockquote><h3 id="三、进一步了解GraphQL"><a href="#三、进一步了解GraphQL" class="headerlink" title="三、进一步了解GraphQL"></a>三、进一步了解GraphQL</h3><p>1.按需索取，避免浪费</p><p>2.一次查询多个数据</p><p>3.API演进无需划分版本</p><h3 id="四、查询规范"><a href="#四、查询规范" class="headerlink" title="四、查询规范"></a>四、查询规范</h3><p>1.字段：查询和其结果拥有几乎一样的结构</p><p>2.参数：语法格式：（参数名：参数值）</p><p>3.别名：一次查询多个相同对象，但是值不同，要起别名 </p><p>别名1：对象(){}</p><p>别名2：对象(){}</p><p>4.片段：查询对的属相如果相同，可以采用片段的方式进行简化定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">别名1：对象()&#123;</span><br><span class="line">...片段名</span><br><span class="line">&#125;</span><br><span class="line">别名2：对象()&#123;</span><br><span class="line">...片段名</span><br><span class="line">&#125;</span><br><span class="line">fragment 片段名 on Character&#123;</span><br><span class="line">属性</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、GraphQL的Schema和类型规范"><a href="#五、GraphQL的Schema和类型规范" class="headerlink" title="五、GraphQL的Schema和类型规范"></a>五、GraphQL的Schema和类型规范</h3><p>Schema定义结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">schema &#123; #定义查询 </span><br><span class="line">query: UserQuery </span><br><span class="line">&#125;</span><br><span class="line">type UserQuery &#123; #定义查询的类型 </span><br><span class="line">user(id:ID) : User #指定对象以及参数类型 </span><br><span class="line">&#125;</span><br><span class="line">type User &#123; #定义对象 </span><br><span class="line">id:ID! # !表示该属性是非空项 </span><br><span class="line">name:String </span><br><span class="line">age:Int </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标量类型：</p><ul><li><p>Int ：有符号 32 位整数。</p></li><li><p>Float ：有符号双精度浮点值。</p></li><li><p>String ：UTF‐8 字符序列。</p></li><li><p>Boolean ： true 或者 false 。 </p></li><li><p>ID ：ID 标量类型表示一个唯一标识符，通常用以重新获取对象或者作为缓存中的键。</p></li></ul><p>接口：跟许多类型系统一样，GraphQL 支持接口。一个接口是一个抽象类型，它包含某些字段，而对象类型必须包含这</p><p>些字段，才能算实现了这个接口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、GraphQL介绍&quot;&gt;&lt;a href=&quot;#一、GraphQL介绍&quot; class=&quot;headerlink&quot; title=&quot;一、GraphQL介绍&quot;&gt;&lt;/a&gt;一、GraphQL介绍&lt;/h3&gt;&lt;p&gt;GraphQL 是由 Facebook 创造的用于描述复杂数据模型的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JVM基本参数命令</title>
    <link href="http://example.com/2020/10/28/JVM%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2020/10/28/JVM%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0%E5%91%BD%E4%BB%A4/</id>
    <published>2020-10-28T02:47:25.000Z</published>
    <updated>2020-10-28T03:07:50.904Z</updated>
    
    <content type="html"><![CDATA[<p>JVM参数类型分三种：1.标准参数、2.-X参数、3.-XX参数（使用率高）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标准参数常用命令：</span><br><span class="line">java -version 查看版本</span><br><span class="line">java -showversion 查看版本并退出</span><br><span class="line">java -D&lt;名称&gt;&#x3D;&lt;值&gt; 设置系统属性</span><br><span class="line">java -help 输出帮助消息</span><br><span class="line">java -server 选择server VM 默认就是server</span><br><span class="line">java -client 选择client VM</span><br></pre></td></tr></table></figure><p> -server与-client区别：ServerVM初始堆空间大，默认使用并行垃圾回收器，启动慢运行快，ClientVM初始堆空间小，使用串行垃圾回收器，启动更快，运行更慢。还有一点就是现在64位机器只支持server不支持client了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-X参数常用命令：</span><br><span class="line">主要是三种模式</span><br><span class="line">-Xint：解释模式</span><br><span class="line">-Xcomp：编译模式</span><br><span class="line">-Xmixed：混合模式</span><br></pre></td></tr></table></figure><p>-Xint模式会强制JVM执行所有字节码，运行速度低，-Xcomp使用时，会把所有代码编译成本地代码，-Xmixed是混合模式，是默认的，由JVM自己决定。-Xint是编译比较快而运行是比较慢的<br>-Xcomp是编译比较慢但是运行是比较快的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX参数常用命令：</span><br><span class="line">两种方式，boolean类型与非boolean类型</span><br><span class="line">boolean：-XX：[+-]&lt;名称&gt; 表示禁止或启动某命令</span><br><span class="line">非boolean：-XX：NewRatio&#x3D;1 表示新生代与老年代的比值</span><br><span class="line">-Xms：JVM初始堆内存，等价于-XX:InitialHeapSize</span><br><span class="line">-XmX：JVm最大堆内存，等价于-XX:MaxHeapSize，</span><br><span class="line">-XX:+PrintFlagsFinal  查看jvm运行参数</span><br></pre></td></tr></table></figure><p>、运行-XX：+PrintFlagsFinal查看运行参数时，出现=与:=两种形式，其中=表示原始值，而:=表示修改过的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jps -l 查看进程id</span><br><span class="line">jinfo -flags &lt;进程id&gt; 查看正在运行的jvm所有参数</span><br><span class="line">jinfo -flags &lt;参数名&gt; &lt;进程id&gt; 查看某个特定参数</span><br><span class="line">jstat 查看堆内存使用情况</span><br><span class="line">jstat -class &lt;pid&gt; 查看class加载统计</span><br><span class="line">jstat -complier &lt;pid&gt; 查看编译统计</span><br><span class="line">jstat -gc &lt;pid&gt; 查看垃圾回收统计</span><br><span class="line">jmap 对堆内存进行统计分析</span><br><span class="line">jmap -heap &lt;pid&gt; 查看内存使用情况</span><br><span class="line">jmap -histo &lt;pid&gt; | more 查看内存中所有对象数量及大小</span><br><span class="line">jmap -histo:live &lt;pid&gt; | more 查看内存中活跃对象的数量及大小</span><br><span class="line">jmap -dump:format&#x3D;b,file&#x3D;&#x2F;temp&#x2F;dumpdat &lt;pid&gt; 将内存使用情况dump到文件中</span><br><span class="line">jhat -port &lt;port&gt; &lt;file&gt; 用jhat将二进制dump文件打开并开启一个端口供访问分析</span><br></pre></td></tr></table></figure><p>两个可视化工具，MAT，VisualVM。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JVM参数类型分三种：1.标准参数、2.-X参数、3.-XX参数（使用率高）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
